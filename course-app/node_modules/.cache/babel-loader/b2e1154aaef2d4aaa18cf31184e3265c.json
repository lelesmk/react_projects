{"ast":null,"code":"var _jsxFileName = \"/Users/LelethuMkefa/dev/js-course/react-flux-app/src/shared/TextInput.js\";\n\n/** Reuseable code for form inputs */\nimport React from \"react\";\n/** define PropTypes whenever a reusable component is created\n *  so other devs understand what data to pass down and to\n *  get warnings if we forget to pass the expected data down.\n */\n\nimport PropTypes from \"prop-types\";\n\nfunction TextInput(props) {\n  /** Bootstrap requires a has-error class on the\n   *  form group wrapper if the input has an error.\n   *\n   *  - start with default value \"form-group\"\n   *  - if props.error is set && the error isn't an\n   *    empty string\n   *      then concatenate another class to wrapperClass\n   */\n  let wrapperClass = \"form-group\"; // Dynamically add a Bootstrap class name\n\n  if (props.error.length > 0) {\n    wrapperClass += \" has-error\";\n    /** Bootstrapper has-error class will add a\n     *  red line around the input when it is in\n     *  an error state.\n     */\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, props.label), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: \"text\",\n    onChange: props.onChange,\n    name: props.name,\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  })), props.error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 23\n    }\n  }, props.error));\n} // declare PropTypes\n\n\nTextInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  error: PropTypes.string\n}; // declare default PropTypes\n\nTextInput.defaultProps = {\n  // if no error passed in, default to empty string\n  error: \"\"\n};\nexport default TextInput;","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/shared/TextInput.js"],"names":["React","PropTypes","TextInput","props","wrapperClass","error","length","id","label","onChange","name","propTypes","string","isRequired","func","value","defaultProps"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;AAIA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB;;;;;;;;AAQA,MAAIC,YAAY,GAAG,YAAnB,CATwB,CAUxB;;AACA,MAAID,KAAK,CAACE,KAAN,CAAYC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,YAAY,IAAI,YAAhB;AACA;;;;AAID;;AACD,sBACE;AAAK,IAAA,SAAS,EAAEA,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAED,KAAK,CAACI,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BJ,KAAK,CAACK,KAAjC,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,EAAE,EAAEL,KAAK,CAACI,EADZ;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,QAAQ,EAAEJ,KAAK,CAACM,QAHlB;AAIE,IAAA,IAAI,EAAEN,KAAK,CAACO,IAJd;AAKE,IAAA,SAAS,EAAC,cALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,EAYGP,KAAK,CAACE,KAAN,iBAAe;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCF,KAAK,CAACE,KAA3C,CAZlB,CADF;AAgBD,C,CAED;;;AACAH,SAAS,CAACS,SAAV,GAAsB;AACpBJ,EAAAA,EAAE,EAAEN,SAAS,CAACW,MAAV,CAAiBC,UADD;AAEpBH,EAAAA,IAAI,EAAET,SAAS,CAACW,MAAV,CAAiBC,UAFH;AAGpBL,EAAAA,KAAK,EAAEP,SAAS,CAACW,MAAV,CAAiBC,UAHJ;AAIpBJ,EAAAA,QAAQ,EAAER,SAAS,CAACa,IAAV,CAAeD,UAJL;AAKpBE,EAAAA,KAAK,EAAEd,SAAS,CAACW,MALG;AAMpBP,EAAAA,KAAK,EAAEJ,SAAS,CAACW;AANG,CAAtB,C,CAQA;;AACAV,SAAS,CAACc,YAAV,GAAyB;AACvB;AACAX,EAAAA,KAAK,EAAE;AAFgB,CAAzB;AAKA,eAAeH,SAAf","sourcesContent":["/** Reuseable code for form inputs */\n\nimport React from \"react\";\n\n/** define PropTypes whenever a reusable component is created\n *  so other devs understand what data to pass down and to\n *  get warnings if we forget to pass the expected data down.\n */\nimport PropTypes from \"prop-types\";\n\nfunction TextInput(props) {\n  /** Bootstrap requires a has-error class on the\n   *  form group wrapper if the input has an error.\n   *\n   *  - start with default value \"form-group\"\n   *  - if props.error is set && the error isn't an\n   *    empty string\n   *      then concatenate another class to wrapperClass\n   */\n  let wrapperClass = \"form-group\";\n  // Dynamically add a Bootstrap class name\n  if (props.error.length > 0) {\n    wrapperClass += \" has-error\";\n    /** Bootstrapper has-error class will add a\n     *  red line around the input when it is in\n     *  an error state.\n     */\n  }\n  return (\n    <div className={wrapperClass}>\n      <label htmlFor={props.id}>{props.label}</label>\n      <div className=\"field\">\n        <input\n          id={props.id}\n          type=\"text\"\n          onChange={props.onChange}\n          name={props.name}\n          className=\"form-control\"\n        />\n      </div>\n      {/** Display validation error below input */}\n      {props.error && <div className=\"alert alert-danger\">{props.error}</div>}\n    </div>\n  );\n}\n\n// declare PropTypes\nTextInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  error: PropTypes.string,\n};\n// declare default PropTypes\nTextInput.defaultProps = {\n  // if no error passed in, default to empty string\n  error: \"\",\n};\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}