{"ast":null,"code":"import _defineProperty from\"/Users/LelethuMkefa/dev/js-course/course-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/LelethuMkefa/dev/js-course/course-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/LelethuMkefa/dev/js-course/course-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable no-restricted-globals */import React,{useState,useEffect}from\"react\";import CourseForm from\"./CourseForm\";// import toast notifications\nimport{toast}from\"react-toastify\";// import store to access payloads from the api\nimport courseStore from\"../stores/courseStore\";// import actions to interact with the store and not the api directly\nimport*as courseActions from\"../actions/courseActions\";/** Arrow function component with props received */var ManageCoursePage=function ManageCoursePage(props){/**\n   *  - declare client side validation state\n   *  - initialise with empty object */var _useState=useState({}),_useState2=_slicedToArray(_useState,2),errors=_useState2[0],setErrors=_useState2[1];// Connect page to Flux store\n/** store the list of courses from the Flux store in state,\n   *  then connect to the store in on Mount - useEffect()\n   */var _useState3=useState(courseStore.getCourses()),_useState4=_slicedToArray(_useState3,2),courses=_useState4[0],setCourses=_useState4[1];/**\n   *  - declare state to hold course form data\n   *  - initialise with an empty course object\n   * */var _useState5=useState({id:null,slug:\"\",title:\"\",authorId:null,category:\"\"}),_useState6=_slicedToArray(_useState5,2),course=_useState6[0],setCourse=_useState6[1];// Edit course\nuseEffect(function(){// connect/subscribe to the flux store\ncourseStore.addChangeListener(onChange);// run onChange() callback when courseStore changes\n// get slug from querry parameters\nvar slug=props.match.params.slug;// pulled from path '/courses/:slug' in App.js\n// Find course by slug\n/** if the user access this page directly we need to check\n     *  if courses have been loaded into the Flux store.\n     *  if courses have not been load we need to ask the Flux\n     *  store to load them before the use can access a course.\n     */ // on page load check if there's any courses in state yet\nif(courses.length===0){// if no courses in courses array we load them\n/** when this change is completed the\n       *  callback onChange() is executed and\n       *  updated the array of courses.\n       *  since courses.length is listed in the\n       *  dependency array below, useEffect will run again.*/courseActions.loadCourses();}else if(slug){// get course from store and update the course\n/** getCourseBySlug returns a course with a specified slug\n       *  from the flux store. The result is passed to setCourse().\n       */if(courseStore.courseFound(slug)===true){setCourse(courseStore.getCourseBySlug(slug));// from path '/courses/:slug'\n}else{props.history.push(\"/404\");}}// on UNMOUNTING (navigating to a different page) return this function\n/** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */return function(){return courseStore.removeChangeListener(onChange);};// clean addChangeListener new page is rendered\n},[props.history,courses.length,props.match.params.slug]);// declare a dependancy array\n/** If anything in the dependency array changes, useEffect will re-run.\n   *  When useEffect runs the second time after courses are loaded\n   *  courses.length will not be 0 and if there's a slug in the url\n   *  it will ask the store for the relevant course, and the course\n   *  will be there because the array of courses  has already been\n   *  populated in the Flux store.\n   */ // declare change handler to enable form inputs\nfunction handleChange(event){/**\n     *  - use ...spread operator to copy state for editing\n     *  - set value passed in by form event based on the\n     *    name property of element e.g.\n     *    if attribute name=\"title\",\n     *    then value will be stored in course.title\n     *    and intialised to a variable prop [event.target.name]\n     *    called a Computed Property\n     *    which can be used by each form input.\n     *  - pass updated course to setCourse function*/var updatedCourse=_objectSpread(_objectSpread({},course),{},_defineProperty({},event.target.name,event.target.value));// pass the updatedCourse to the setCourse function\nsetCourse(updatedCourse);}// Rename authors array keys to html options tag attributes\n// function options(options) {\n//   // map object array\n//   return (options = options.map((item) => {\n//     debugger;\n//     // copy object array and rename keys to value and label\n//     return { value: item.id, label: item.name };\n//   }));\n// }\n// execute function when a course is added to the store\nfunction onChange(){// request courses from store and add/set to this component state\nsetCourses(courseStore.getCourses());/** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */}// form validation function\nfunction formIsValid(){// declare local errors object\nvar _errors={};// initialise errors if course props empty\nif(!course.title)_errors.title=\"Title is required\";if(!course.authorId)_errors.authorId=\"Author ID is required\";if(!course.category)_errors.category=\"Category is required\";// pass validation error result\nsetErrors(_errors);// form is valid if the errors object has no properties\nreturn Object.keys(_errors).length===0;// returns boolean\n/**\n     *  the Object.keys returns an array of an object's keys.\n     *  if the array of keys for the _errors' object is 0 then\n     *  the errors object has no properties.\n     */}// declare submit handler\n// automatically receives an event from browser\nfunction handleSubmit(event){// handle form validation\n/** if the form is not valid then do nothing. */if(!formIsValid())return;// to handle event on client, call prevent default post to server\nevent.preventDefault();// call courseActions (instead of directly calling the api)\ncourseActions// pass the course held in state\n.saveCourse(course)/** all the api functions return a promise so we could\n       *  declare .then() to specify what should happen after\n       *  the saveCourse is completed.\n       */.then(function(){// redirect back to CoursesPage\nprops.history.push(\"/courses\");/** since Add Course was loaded via\n         * React Router's Route we have access to\n         * React Router's history object on props.\n         * So we can programmatically redirect the\n         * user after the save is completed. */ // display notification after success save\ntoast.success(\"Course saved.\");});}return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h2\",null,\"Manage Course\"),/*#__PURE__*/React.createElement(CourseForm,{course:course,onChange:handleChange,onSubmit:handleSubmit,errors:errors}));};export default ManageCoursePage;// then create a route in App.js","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/course-app/src/components/ManageCoursePage.js"],"names":["React","useState","useEffect","CourseForm","toast","courseStore","courseActions","ManageCoursePage","props","errors","setErrors","getCourses","courses","setCourses","id","slug","title","authorId","category","course","setCourse","addChangeListener","onChange","match","params","length","loadCourses","courseFound","getCourseBySlug","history","push","removeChangeListener","handleChange","event","updatedCourse","target","name","value","formIsValid","_errors","Object","keys","handleSubmit","preventDefault","saveCourse","then","success"],"mappings":"8XAAA,0CACA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CAEA;AACA,OAASC,KAAT,KAAsB,gBAAtB,CAEA;AACA,MAAOC,CAAAA,WAAP,KAAwB,uBAAxB,CAEA;AACA,MAAO,GAAKC,CAAAA,aAAZ,KAA+B,0BAA/B,CAEA,mDACA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAW,CAClC;;uCADkC,cAINP,QAAQ,CAAC,EAAD,CAJF,wCAI3BQ,MAJ2B,eAInBC,SAJmB,eAMlC;AACA;;KAPkC,eAUJT,QAAQ,CAACI,WAAW,CAACM,UAAZ,EAAD,CAVJ,yCAU3BC,OAV2B,eAUlBC,UAVkB,eAYlC;;;OAZkC,eAgBNZ,QAAQ,CAAC,CACnCa,EAAE,CAAE,IAD+B,CAEnCC,IAAI,CAAE,EAF6B,CAGnCC,KAAK,CAAE,EAH4B,CAInCC,QAAQ,CAAE,IAJyB,CAKnCC,QAAQ,CAAE,EALyB,CAAD,CAhBF,yCAgB3BC,MAhB2B,eAgBnBC,SAhBmB,eAwBlC;AACAlB,SAAS,CAAC,UAAM,CACd;AACAG,WAAW,CAACgB,iBAAZ,CAA8BC,QAA9B,EAAyC;AAEzC;AACA,GAAMP,CAAAA,IAAI,CAAGP,KAAK,CAACe,KAAN,CAAYC,MAAZ,CAAmBT,IAAhC,CAAsC;AAEtC;AACA;;;;OARc,CAcd;AACA,GAAIH,OAAO,CAACa,MAAR,GAAmB,CAAvB,CAA0B,CACxB;AACA;;;;6DAKAnB,aAAa,CAACoB,WAAd,GACD,CARD,IAQO,IAAIX,IAAJ,CAAU,CACf;AACA;;SAIA,GAAIV,WAAW,CAACsB,WAAZ,CAAwBZ,IAAxB,IAAkC,IAAtC,CAA4C,CAC1CK,SAAS,CAACf,WAAW,CAACuB,eAAZ,CAA4Bb,IAA5B,CAAD,CAAT,CAA8C;AAC/C,CAFD,IAEO,CACLP,KAAK,CAACqB,OAAN,CAAcC,IAAd,CAAmB,MAAnB,EACD,CACF,CAED;AACA;;OAGA,MAAO,kBAAMzB,CAAAA,WAAW,CAAC0B,oBAAZ,CAAiCT,QAAjC,CAAN,EAAP,CAAyD;AAC1D,CAzCQ,CAyCN,CAACd,KAAK,CAACqB,OAAP,CAAgBjB,OAAO,CAACa,MAAxB,CAAgCjB,KAAK,CAACe,KAAN,CAAYC,MAAZ,CAAmBT,IAAnD,CAzCM,CAAT,CAyC8D;AAC9D;;;;;;KAnEkC,CA2ElC;AACA,QAASiB,CAAAA,YAAT,CAAsBC,KAAtB,CAA6B,CAC3B;;;;;;;;;qDAUA,GAAMC,CAAAA,aAAa,gCAEdf,MAFc,wBAIhBc,KAAK,CAACE,MAAN,CAAaC,IAJG,CAIIH,KAAK,CAACE,MAAN,CAAaE,KAJjB,EAAnB,CAOA;AACAjB,SAAS,CAACc,aAAD,CAAT,CACD,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,QAASZ,CAAAA,QAAT,EAAoB,CAClB;AACAT,UAAU,CAACR,WAAW,CAACM,UAAZ,EAAD,CAAV,CACA;;;gDAID,CAED;AACA,QAAS2B,CAAAA,WAAT,EAAuB,CACrB;AACA,GAAMC,CAAAA,OAAO,CAAG,EAAhB,CAEA;AACA,GAAI,CAACpB,MAAM,CAACH,KAAZ,CAAmBuB,OAAO,CAACvB,KAAR,CAAgB,mBAAhB,CACnB,GAAI,CAACG,MAAM,CAACF,QAAZ,CAAsBsB,OAAO,CAACtB,QAAR,CAAmB,uBAAnB,CACtB,GAAI,CAACE,MAAM,CAACD,QAAZ,CAAsBqB,OAAO,CAACrB,QAAR,CAAmB,sBAAnB,CAEtB;AACAR,SAAS,CAAC6B,OAAD,CAAT,CAEA;AACA,MAAOC,CAAAA,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBd,MAArB,GAAgC,CAAvC,CAA0C;AAC1C;;;;OAKD,CAED;AACA;AACA,QAASiB,CAAAA,YAAT,CAAsBT,KAAtB,CAA6B,CAC3B;AACA,gDACA,GAAI,CAACK,WAAW,EAAhB,CAAoB,OAEpB;AACAL,KAAK,CAACU,cAAN,GAEA;AACArC,aACE;AADW,CAEVsC,UAFH,CAEczB,MAFd,CAIE;;;SAJF,CAQG0B,IARH,CAQQ,UAAM,CACV;AACArC,KAAK,CAACqB,OAAN,CAAcC,IAAd,CAAmB,UAAnB,EACA;;;;+CAHU,CASV;AACA1B,KAAK,CAAC0C,OAAN,CAAc,eAAd,EACD,CAnBH,EAoBD,CAED,mBACE,qDACE,8CADF,cAOE,oBAAC,UAAD,EACE,MAAM,CAAE3B,MADV,CAEE,QAAQ,CAAEa,YAFZ,CAGE,QAAQ,CAAEU,YAHZ,CAIE,MAAM,CAAEjC,MAJV,EAPF,CADF,CAgBD,CA5LD,CA8LA,cAAeF,CAAAA,gBAAf,CAEA","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport React, { useState, useEffect } from \"react\";\nimport CourseForm from \"./CourseForm\";\n\n// import toast notifications\nimport { toast } from \"react-toastify\";\n\n// import store to access payloads from the api\nimport courseStore from \"../stores/courseStore\";\n\n// import actions to interact with the store and not the api directly\nimport * as courseActions from \"../actions/courseActions\";\n\n/** Arrow function component with props received */\nconst ManageCoursePage = (props) => {\n  /**\n   *  - declare client side validation state\n   *  - initialise with empty object */\n  const [errors, setErrors] = useState({});\n\n  // Connect page to Flux store\n  /** store the list of courses from the Flux store in state,\n   *  then connect to the store in on Mount - useEffect()\n   */\n  const [courses, setCourses] = useState(courseStore.getCourses());\n\n  /**\n   *  - declare state to hold course form data\n   *  - initialise with an empty course object\n   * */\n  const [course, setCourse] = useState({\n    id: null,\n    slug: \"\",\n    title: \"\",\n    authorId: null,\n    category: \"\",\n  });\n\n  // Edit course\n  useEffect(() => {\n    // connect/subscribe to the flux store\n    courseStore.addChangeListener(onChange); // run onChange() callback when courseStore changes\n\n    // get slug from querry parameters\n    const slug = props.match.params.slug; // pulled from path '/courses/:slug' in App.js\n\n    // Find course by slug\n    /** if the user access this page directly we need to check\n     *  if courses have been loaded into the Flux store.\n     *  if courses have not been load we need to ask the Flux\n     *  store to load them before the use can access a course.\n     */\n\n    // on page load check if there's any courses in state yet\n    if (courses.length === 0) {\n      // if no courses in courses array we load them\n      /** when this change is completed the\n       *  callback onChange() is executed and\n       *  updated the array of courses.\n       *  since courses.length is listed in the\n       *  dependency array below, useEffect will run again.*/\n      courseActions.loadCourses();\n    } else if (slug) {\n      // get course from store and update the course\n      /** getCourseBySlug returns a course with a specified slug\n       *  from the flux store. The result is passed to setCourse().\n       */\n\n      if (courseStore.courseFound(slug) === true) {\n        setCourse(courseStore.getCourseBySlug(slug)); // from path '/courses/:slug'\n      } else {\n        props.history.push(\"/404\");\n      }\n    }\n\n    // on UNMOUNTING (navigating to a different page) return this function\n    /** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */\n    return () => courseStore.removeChangeListener(onChange); // clean addChangeListener new page is rendered\n  }, [props.history, courses.length, props.match.params.slug]); // declare a dependancy array\n  /** If anything in the dependency array changes, useEffect will re-run.\n   *  When useEffect runs the second time after courses are loaded\n   *  courses.length will not be 0 and if there's a slug in the url\n   *  it will ask the store for the relevant course, and the course\n   *  will be there because the array of courses  has already been\n   *  populated in the Flux store.\n   */\n\n  // declare change handler to enable form inputs\n  function handleChange(event) {\n    /**\n     *  - use ...spread operator to copy state for editing\n     *  - set value passed in by form event based on the\n     *    name property of element e.g.\n     *    if attribute name=\"title\",\n     *    then value will be stored in course.title\n     *    and intialised to a variable prop [event.target.name]\n     *    called a Computed Property\n     *    which can be used by each form input.\n     *  - pass updated course to setCourse function*/\n    const updatedCourse = {\n      // copy the course object\n      ...course,\n      // set the title property on the copy to the value passed in on the event\n      [event.target.name]: event.target.value,\n      // [event.target.name]: event.target.value,\n    };\n    // pass the updatedCourse to the setCourse function\n    setCourse(updatedCourse);\n  }\n  // Rename authors array keys to html options tag attributes\n  // function options(options) {\n  //   // map object array\n  //   return (options = options.map((item) => {\n  //     debugger;\n  //     // copy object array and rename keys to value and label\n  //     return { value: item.id, label: item.name };\n  //   }));\n  // }\n\n  // execute function when a course is added to the store\n  function onChange() {\n    // request courses from store and add/set to this component state\n    setCourses(courseStore.getCourses());\n    /** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */\n  }\n\n  // form validation function\n  function formIsValid() {\n    // declare local errors object\n    const _errors = {};\n\n    // initialise errors if course props empty\n    if (!course.title) _errors.title = \"Title is required\";\n    if (!course.authorId) _errors.authorId = \"Author ID is required\";\n    if (!course.category) _errors.category = \"Category is required\";\n\n    // pass validation error result\n    setErrors(_errors);\n\n    // form is valid if the errors object has no properties\n    return Object.keys(_errors).length === 0; // returns boolean\n    /**\n     *  the Object.keys returns an array of an object's keys.\n     *  if the array of keys for the _errors' object is 0 then\n     *  the errors object has no properties.\n     */\n  }\n\n  // declare submit handler\n  // automatically receives an event from browser\n  function handleSubmit(event) {\n    // handle form validation\n    /** if the form is not valid then do nothing. */\n    if (!formIsValid()) return;\n\n    // to handle event on client, call prevent default post to server\n    event.preventDefault();\n\n    // call courseActions (instead of directly calling the api)\n    courseActions\n      // pass the course held in state\n      .saveCourse(course)\n\n      /** all the api functions return a promise so we could\n       *  declare .then() to specify what should happen after\n       *  the saveCourse is completed.\n       */\n      .then(() => {\n        // redirect back to CoursesPage\n        props.history.push(\"/courses\");\n        /** since Add Course was loaded via\n         * React Router's Route we have access to\n         * React Router's history object on props.\n         * So we can programmatically redirect the\n         * user after the save is completed. */\n\n        // display notification after success save\n        toast.success(\"Course saved.\");\n      });\n  }\n\n  return (\n    <>\n      <h2>Manage Course</h2>\n      {/** Pass down to CourseForm child component via props\n       *  - pass down course state object\n       *  - pass down change handler\n       *  - pass down save form handler\n       *  - pass down validation errors */}\n      <CourseForm\n        course={course}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n        errors={errors}\n      />\n    </>\n  );\n};\n\nexport default ManageCoursePage;\n\n// then create a route in App.js\n"]},"metadata":{},"sourceType":"module"}