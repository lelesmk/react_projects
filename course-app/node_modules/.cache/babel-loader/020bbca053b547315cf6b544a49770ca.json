{"ast":null,"code":"var _jsxFileName = \"/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/ManageAuthorPage.js\";\n\n/* eslint-disable no-restricted-globals */\nimport React, { useState, useEffect } from \"react\";\nimport AuthorForm from \"./AuthorForm\"; // import toast notifications\n\nimport { toast } from \"react-toastify\"; // import store to access payloads from the api\n\nimport authorStore from \"../stores/authorStore\"; // import actions to interact with the store and not the api directly\n\nimport * as authorActions from \"../actions/authorActions\";\n/** Arrow function component with props received */\n\nconst ManageAuthorPage = props => {\n  /**\n   *  - declare client side validation state\n   *  - initialise with empty object */\n  const [errors, setErrors] = useState({}); // Connect page to Flux store\n\n  /** store the list of authors from the Flux store in state,\n   *  then connect to the store in on Mount - useEffect()\n   */\n\n  const [authors, setAuthors] = useState(authorStore.getAuthors());\n  /**\n   *  - declare state to hold author form data\n   *  - initialise with an empty author object\n   * */\n\n  const [author, setAuthor] = useState({\n    id: null,\n    name: \"\"\n  }); // Edit author\n\n  useEffect(() => {\n    // connect/subscribe to the flux store\n    authorStore.addChangeListener(onChange); // run onChange() callback when authorStore changes\n    // get id from querry parameters\n\n    const id = props.match.params.id; // pulled from path '/authors/:id' in App.js\n    // Find author by id\n\n    /** if the user access this page directly we need to check\n     *  if authors have been loaded into the Flux store.\n     *  if authors have not been load we need to ask the Flux\n     *  store to load them before the use can access a author.\n     */\n    // on page load check if there's any authors in state yet\n\n    if (authors.length === 0) {\n      // if no authors in authors array we load them\n\n      /** when this change is completed the\n       *  callback onChange() is executed and\n       *  updated the array of authors.\n       *  since authors.length is listed in the\n       *  dependency array below, useEffect will run again.*/\n      authorActions.loadAuthors();\n    } else if (id) {\n      // get author from store and update the author\n\n      /** getAuthorById returns a author with a specified id\n       *  from the flux store. The result is passed to setAuthor().\n       */\n      if (authorStore.authorFound(id) === true) {\n        setAuthor(authorStore.getAuthorById(id)); // from path '/authors/:id'\n      } else {\n        props.history.push(\"/404\");\n      }\n    } // on UNMOUNTING (navigating to a different page) return this function\n\n    /** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */\n\n\n    return () => authorStore.removeChangeListener(onChange); // clean addChangeListener new page is rendered\n  }, [props.history, authors.length, props.match.params.id]); // declare a dependancy array\n\n  /** If anything in the dependency array changes, useEffect will re-run.\n   *  When useEffect runs the second time after authors are loaded\n   *  authors.length will not be 0 and if there's a id in the url\n   *  it will ask the store for the relevant author, and the author\n   *  will be there because the array of authors  has already been\n   *  populated in the Flux store.\n   */\n  // execute function when a author is added to the store\n\n  function onChange() {\n    // request authors from store and add/set to this component state\n    setAuthors(authorStore.getAuthors());\n    /** what this says is:\n     *  - getAuthors from the api\n     *  - when the api call completes, then\n     *  - store the array of authors in state */\n  } // declare change handler for form inputs\n\n\n  function handleChange(event) {\n    /**\n     *  - use ...spread operator to copy state for editing\n     *  - set value passed in by form event based on the\n     *    name property of element e.g.\n     *    if attribute name=\"title\",\n     *    then value will be stored in author.title\n     *    and intialised to a variable prop [event.target.name]\n     *    called a Computed Property\n     *    which can be used by each form input.\n     *  - pass updated author to setauthor function*/\n    const updatedAuthor = { ...author,\n      [event.target.name]: event.target.value\n    };\n    setAuthor(updatedAuthor);\n  } // form validation function\n\n\n  function formIsValid() {\n    // declare local errors object\n    const _errors = {}; // initialise errors if author props empty\n\n    if (!author.name) _errors.title = \"Name is required\"; // pass validation error result\n\n    setErrors(_errors); // form is valid if the errors object has no properties\n\n    return Object.keys(_errors).length === 0; // returns boolean\n\n    /**\n     *  the Object.keys returns an array of an object's keys.\n     *  if the array of keys for the _errors' object is 0 then\n     *  the errors object has no properties.\n     */\n  } // declare submit handler\n  // automatically receives an event from browser\n\n\n  function handleSubmit(event) {\n    // handle form validation\n\n    /** if the form is not valid then do nothing. */\n    if (!formIsValid()) return; // to handle event on client, call prevent default post to server\n\n    event.preventDefault(); // call authorActions (instead of directly calling the api)\n\n    authorActions // pass the author held in state\n    .saveAuthor(author)\n    /** all the api functions return a promise so we could\n     *  declare .then() to specify what should happen after\n     *  the saveAuthor is completed.\n     */\n    .then(() => {\n      // redirect back to AuthorsPage\n      props.history.push(\"/authors\");\n      /** since Add Author was loaded via\n       * React Router's Route we have access to\n       * React Router's history object on props.\n       * So we can programmatically redirect the\n       * user after the save is completed. */\n      // display notification after success save\n\n      toast.success(\"Author saved.\");\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, \"Manage Author\"), /*#__PURE__*/React.createElement(AuthorForm, {\n    author: author,\n    onChange: handleChange,\n    onSubmit: handleSubmit,\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ManageAuthorPage; // then create a route in App.js","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/ManageAuthorPage.js"],"names":["React","useState","useEffect","AuthorForm","toast","authorStore","authorActions","ManageAuthorPage","props","errors","setErrors","authors","setAuthors","getAuthors","author","setAuthor","id","name","addChangeListener","onChange","match","params","length","loadAuthors","authorFound","getAuthorById","history","push","removeChangeListener","handleChange","event","updatedAuthor","target","value","formIsValid","_errors","title","Object","keys","handleSubmit","preventDefault","saveAuthor","then","success"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,uBAAxB,C,CAEA;;AACA,OAAO,KAAKC,aAAZ,MAA+B,0BAA/B;AAEA;;AACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC;;;AAGA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC,CAJkC,CAMlC;;AACA;;;;AAGA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAACI,WAAW,CAACQ,UAAZ,EAAD,CAAtC;AAEA;;;;;AAIA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC;AACnCe,IAAAA,EAAE,EAAE,IAD+B;AAEnCC,IAAAA,IAAI,EAAE;AAF6B,GAAD,CAApC,CAhBkC,CAoBlC;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACd;AACAG,IAAAA,WAAW,CAACa,iBAAZ,CAA8BC,QAA9B,EAFc,CAE2B;AAEzC;;AACA,UAAMH,EAAE,GAAGR,KAAK,CAACY,KAAN,CAAYC,MAAZ,CAAmBL,EAA9B,CALc,CAKoB;AAElC;;AACA;;;;;AAMA;;AACA,QAAIL,OAAO,CAACW,MAAR,KAAmB,CAAvB,EAA0B;AACxB;;AACA;;;;;AAKAhB,MAAAA,aAAa,CAACiB,WAAd;AACD,KARD,MAQO,IAAIP,EAAJ,EAAQ;AACb;;AACA;;;AAIA,UAAIX,WAAW,CAACmB,WAAZ,CAAwBR,EAAxB,MAAgC,IAApC,EAA0C;AACxCD,QAAAA,SAAS,CAACV,WAAW,CAACoB,aAAZ,CAA0BT,EAA1B,CAAD,CAAT,CADwC,CACE;AAC3C,OAFD,MAEO;AACLR,QAAAA,KAAK,CAACkB,OAAN,CAAcC,IAAd,CAAmB,MAAnB;AACD;AACF,KAlCa,CAoCd;;AACA;;;;;AAGA,WAAO,MAAMtB,WAAW,CAACuB,oBAAZ,CAAiCT,QAAjC,CAAb,CAxCc,CAwC2C;AAC1D,GAzCQ,EAyCN,CAACX,KAAK,CAACkB,OAAP,EAAgBf,OAAO,CAACW,MAAxB,EAAgCd,KAAK,CAACY,KAAN,CAAYC,MAAZ,CAAmBL,EAAnD,CAzCM,CAAT,CArBkC,CA8D0B;;AAC5D;;;;;;;AAQA;;AACA,WAASG,QAAT,GAAoB;AAClB;AACAP,IAAAA,UAAU,CAACP,WAAW,CAACQ,UAAZ,EAAD,CAAV;AACA;;;;AAID,GA/EiC,CAiFlC;;;AACA,WAASgB,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B;;;;;;;;;;AAUA,UAAMC,aAAa,GAAG,EACpB,GAAGjB,MADiB;AAEpB,OAACgB,KAAK,CAACE,MAAN,CAAaf,IAAd,GAAqBa,KAAK,CAACE,MAAN,CAAaC;AAFd,KAAtB;AAIAlB,IAAAA,SAAS,CAACgB,aAAD,CAAT;AACD,GAlGiC,CAoGlC;;;AACA,WAASG,WAAT,GAAuB;AACrB;AACA,UAAMC,OAAO,GAAG,EAAhB,CAFqB,CAIrB;;AACA,QAAI,CAACrB,MAAM,CAACG,IAAZ,EAAkBkB,OAAO,CAACC,KAAR,GAAgB,kBAAhB,CALG,CAOrB;;AACA1B,IAAAA,SAAS,CAACyB,OAAD,CAAT,CARqB,CAUrB;;AACA,WAAOE,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBb,MAArB,KAAgC,CAAvC,CAXqB,CAWqB;;AAC1C;;;;;AAKD,GAtHiC,CAwHlC;AACA;;;AACA,WAASiB,YAAT,CAAsBT,KAAtB,EAA6B;AAC3B;;AACA;AACA,QAAI,CAACI,WAAW,EAAhB,EAAoB,OAHO,CAK3B;;AACAJ,IAAAA,KAAK,CAACU,cAAN,GAN2B,CAQ3B;;AACAlC,IAAAA,aAAa,CACX;AADW,KAEVmC,UAFH,CAEc3B,MAFd;AAGE;;;;AAHF,KAOG4B,IAPH,CAOQ,MAAM;AACV;AACAlC,MAAAA,KAAK,CAACkB,OAAN,CAAcC,IAAd,CAAmB,UAAnB;AACA;;;;;AAMA;;AACAvB,MAAAA,KAAK,CAACuC,OAAN,CAAc,eAAd;AACD,KAlBH;AAmBD;;AACD,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAOE,oBAAC,UAAD;AACE,IAAA,MAAM,EAAE7B,MADV;AAEE,IAAA,QAAQ,EAAEe,YAFZ;AAGE,IAAA,QAAQ,EAAEU,YAHZ;AAIE,IAAA,MAAM,EAAE9B,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAgBD,CAvKD;;AAyKA,eAAeF,gBAAf,C,CAEA","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport React, { useState, useEffect } from \"react\";\nimport AuthorForm from \"./AuthorForm\";\n\n// import toast notifications\nimport { toast } from \"react-toastify\";\n\n// import store to access payloads from the api\nimport authorStore from \"../stores/authorStore\";\n\n// import actions to interact with the store and not the api directly\nimport * as authorActions from \"../actions/authorActions\";\n\n/** Arrow function component with props received */\nconst ManageAuthorPage = (props) => {\n  /**\n   *  - declare client side validation state\n   *  - initialise with empty object */\n  const [errors, setErrors] = useState({});\n\n  // Connect page to Flux store\n  /** store the list of authors from the Flux store in state,\n   *  then connect to the store in on Mount - useEffect()\n   */\n  const [authors, setAuthors] = useState(authorStore.getAuthors());\n\n  /**\n   *  - declare state to hold author form data\n   *  - initialise with an empty author object\n   * */\n  const [author, setAuthor] = useState({\n    id: null,\n    name: \"\",\n  });\n  // Edit author\n  useEffect(() => {\n    // connect/subscribe to the flux store\n    authorStore.addChangeListener(onChange); // run onChange() callback when authorStore changes\n\n    // get id from querry parameters\n    const id = props.match.params.id; // pulled from path '/authors/:id' in App.js\n\n    // Find author by id\n    /** if the user access this page directly we need to check\n     *  if authors have been loaded into the Flux store.\n     *  if authors have not been load we need to ask the Flux\n     *  store to load them before the use can access a author.\n     */\n\n    // on page load check if there's any authors in state yet\n    if (authors.length === 0) {\n      // if no authors in authors array we load them\n      /** when this change is completed the\n       *  callback onChange() is executed and\n       *  updated the array of authors.\n       *  since authors.length is listed in the\n       *  dependency array below, useEffect will run again.*/\n      authorActions.loadAuthors();\n    } else if (id) {\n      // get author from store and update the author\n      /** getAuthorById returns a author with a specified id\n       *  from the flux store. The result is passed to setAuthor().\n       */\n\n      if (authorStore.authorFound(id) === true) {\n        setAuthor(authorStore.getAuthorById(id)); // from path '/authors/:id'\n      } else {\n        props.history.push(\"/404\");\n      }\n    }\n\n    // on UNMOUNTING (navigating to a different page) return this function\n    /** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */\n    return () => authorStore.removeChangeListener(onChange); // clean addChangeListener new page is rendered\n  }, [props.history, authors.length, props.match.params.id]); // declare a dependancy array\n  /** If anything in the dependency array changes, useEffect will re-run.\n   *  When useEffect runs the second time after authors are loaded\n   *  authors.length will not be 0 and if there's a id in the url\n   *  it will ask the store for the relevant author, and the author\n   *  will be there because the array of authors  has already been\n   *  populated in the Flux store.\n   */\n\n  // execute function when a author is added to the store\n  function onChange() {\n    // request authors from store and add/set to this component state\n    setAuthors(authorStore.getAuthors());\n    /** what this says is:\n     *  - getAuthors from the api\n     *  - when the api call completes, then\n     *  - store the array of authors in state */\n  }\n\n  // declare change handler for form inputs\n  function handleChange(event) {\n    /**\n     *  - use ...spread operator to copy state for editing\n     *  - set value passed in by form event based on the\n     *    name property of element e.g.\n     *    if attribute name=\"title\",\n     *    then value will be stored in author.title\n     *    and intialised to a variable prop [event.target.name]\n     *    called a Computed Property\n     *    which can be used by each form input.\n     *  - pass updated author to setauthor function*/\n    const updatedAuthor = {\n      ...author,\n      [event.target.name]: event.target.value,\n    };\n    setAuthor(updatedAuthor);\n  }\n\n  // form validation function\n  function formIsValid() {\n    // declare local errors object\n    const _errors = {};\n\n    // initialise errors if author props empty\n    if (!author.name) _errors.title = \"Name is required\";\n\n    // pass validation error result\n    setErrors(_errors);\n\n    // form is valid if the errors object has no properties\n    return Object.keys(_errors).length === 0; // returns boolean\n    /**\n     *  the Object.keys returns an array of an object's keys.\n     *  if the array of keys for the _errors' object is 0 then\n     *  the errors object has no properties.\n     */\n  }\n\n  // declare submit handler\n  // automatically receives an event from browser\n  function handleSubmit(event) {\n    // handle form validation\n    /** if the form is not valid then do nothing. */\n    if (!formIsValid()) return;\n\n    // to handle event on client, call prevent default post to server\n    event.preventDefault();\n\n    // call authorActions (instead of directly calling the api)\n    authorActions\n      // pass the author held in state\n      .saveAuthor(author)\n      /** all the api functions return a promise so we could\n       *  declare .then() to specify what should happen after\n       *  the saveAuthor is completed.\n       */\n      .then(() => {\n        // redirect back to AuthorsPage\n        props.history.push(\"/authors\");\n        /** since Add Author was loaded via\n         * React Router's Route we have access to\n         * React Router's history object on props.\n         * So we can programmatically redirect the\n         * user after the save is completed. */\n\n        // display notification after success save\n        toast.success(\"Author saved.\");\n      });\n  }\n  return (\n    <>\n      <h2>Manage Author</h2>\n      {/** Pass down to AuthorForm child component via props\n       *  - pass down author state object\n       *  - pass down change handler\n       *  - pass down save form handler\n       *  - pass down validation errors */}\n      <AuthorForm\n        author={author}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n        errors={errors}\n      />\n    </>\n  );\n};\n\nexport default ManageAuthorPage;\n\n// then create a route in App.js\n"]},"metadata":{},"sourceType":"module"}