{"ast":null,"code":"var _jsxFileName = \"/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/ManageCoursePage.js\";\n\n/* eslint-disable no-restricted-globals */\nimport React, { useState } from \"react\";\nimport CourseForm from \"./CourseForm\"; // import all api functions with wild card reference\n\nimport * as courseApi from \"../api/courseApi\"; // import toast notifications\n\nimport { toast } from \"react-toastify\";\n/** Arrow function component with props received */\n\nconst ManageCoursePage = props => {\n  /**\n   *  - declare client side validation state\n   *  - initialise with empty object */\n  const [errors, setErrors] = useState({});\n  /**\n   *  - declare state to hold course form data\n   *  - initialise with an empty course object\n   * */\n\n  const [course, setCourse] = useState({\n    id: null,\n    slug: \"\",\n    title: \"\",\n    authorId: \"\",\n    categroy: \"\"\n  }); // declare change handler for form inputs\n\n  function handleChange(event) {\n    /**\n     *  - use ...spread operator to copy state for editing\n     *  - set value passed in by form event based on the\n     *    name property of element e.g.\n     *    if attribute name=\"title\",\n     *    then value will be stored in course.title\n     *    and intialised to a variable prop [event.target.name]\n     *    called a Computed Property\n     *    which can be used by each form input.\n     *  - pass updated course to setCourse function*/\n    const updatedCourse = { ...course,\n      [event.target.name]: event.target.value\n    };\n    setCourse(updatedCourse);\n  } // form validation function\n\n\n  function formIsValid() {\n    // declare local errors object\n    const _errors = {}; // validate form fields\n\n    if (!course.title) _errors.title = \"Title is required\";\n    if (!course.authorId) _errors.authorId = \"Author ID is required\";\n    if (!course.category) _errors.category = \"Category is required\"; // pass validation error result\n\n    setErrors(_errors); // form is valid if the errors object has no properties\n\n    return Object.keys(_errors).length === 0;\n    /**\n     *  the Object.keys returns an array of an object's keys.\n     *  if the array of keys for the _errors' object is 0 then\n     *  the errors object has no properties.\n     */\n  } // declare submit handler\n  // automatically receives an event from browser\n\n\n  function handleSubmit(event) {\n    // handle form validation\n\n    /** if the form is not valid then do nothing. */\n    if (!formIsValid()) return; // to handle event on client, call prevent default post to server\n\n    event.preventDefault(); // call save api function and pass the course held in state\n\n    courseApi.saveCourse(course)\n    /** all the api functions return a promise so we could\n     *  declare .then() to specify what should happen after\n     *  the saveCourse is completed.\n     */\n    .then(() => {\n      // redirect back to CoursesPage\n      props.history.push(\"/courses\");\n      /** since Add Course was loaded via\n       * React Router's Route we have access to\n       * React Router's history object on props.\n       * So we can programmatically redirect the\n       * user after the save is completed. */\n      // display notification after success save\n\n      toast.success(\"Course saved.\");\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Manage Course\"), /*#__PURE__*/React.createElement(CourseForm, {\n    course: course,\n    onChange: handleChange,\n    onSubmit: handleSubmit,\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ManageCoursePage; // then create a route in App.js","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/ManageCoursePage.js"],"names":["React","useState","CourseForm","courseApi","toast","ManageCoursePage","props","errors","setErrors","course","setCourse","id","slug","title","authorId","categroy","handleChange","event","updatedCourse","target","name","value","formIsValid","_errors","category","Object","keys","length","handleSubmit","preventDefault","saveCourse","then","history","push","success"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,OAAO,KAAKC,SAAZ,MAA2B,kBAA3B,C,CAEA;;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA;;AACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC;;;AAGA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA;;;;;AAIA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC;AACnCU,IAAAA,EAAE,EAAE,IAD+B;AAEnCC,IAAAA,IAAI,EAAE,EAF6B;AAGnCC,IAAAA,KAAK,EAAE,EAH4B;AAInCC,IAAAA,QAAQ,EAAE,EAJyB;AAKnCC,IAAAA,QAAQ,EAAE;AALyB,GAAD,CAApC,CATkC,CAiBlC;;AACA,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B;;;;;;;;;;AAUA,UAAMC,aAAa,GAAG,EACpB,GAAGT,MADiB;AAEpB,OAACQ,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AAFd,KAAtB;AAIAX,IAAAA,SAAS,CAACQ,aAAD,CAAT;AACD,GAlCiC,CAoClC;;;AACA,WAASI,WAAT,GAAuB;AACrB;AACA,UAAMC,OAAO,GAAG,EAAhB,CAFqB,CAIrB;;AACA,QAAI,CAACd,MAAM,CAACI,KAAZ,EAAmBU,OAAO,CAACV,KAAR,GAAgB,mBAAhB;AACnB,QAAI,CAACJ,MAAM,CAACK,QAAZ,EAAsBS,OAAO,CAACT,QAAR,GAAmB,uBAAnB;AACtB,QAAI,CAACL,MAAM,CAACe,QAAZ,EAAsBD,OAAO,CAACC,QAAR,GAAmB,sBAAnB,CAPD,CASrB;;AACAhB,IAAAA,SAAS,CAACe,OAAD,CAAT,CAVqB,CAYrB;;AACA,WAAOE,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,MAArB,KAAgC,CAAvC;AACA;;;;;AAKD,GAxDiC,CA0DlC;AACA;;;AACA,WAASC,YAAT,CAAsBX,KAAtB,EAA6B;AAC3B;;AACA;AACA,QAAI,CAACK,WAAW,EAAhB,EAAoB,OAHO,CAK3B;;AACAL,IAAAA,KAAK,CAACY,cAAN,GAN2B,CAQ3B;;AACA1B,IAAAA,SAAS,CACN2B,UADH,CACcrB,MADd;AAEE;;;;AAFF,KAMGsB,IANH,CAMQ,MAAM;AACV;AACAzB,MAAAA,KAAK,CAAC0B,OAAN,CAAcC,IAAd,CAAmB,UAAnB;AACA;;;;;AAMA;;AACA7B,MAAAA,KAAK,CAAC8B,OAAN,CAAc,eAAd;AACD,KAjBH;AAkBD;;AACD,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAOE,oBAAC,UAAD;AACE,IAAA,MAAM,EAAEzB,MADV;AAEE,IAAA,QAAQ,EAAEO,YAFZ;AAGE,IAAA,QAAQ,EAAEY,YAHZ;AAIE,IAAA,MAAM,EAAErB,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAgBD,CAxGD;;AA0GA,eAAeF,gBAAf,C,CAEA","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport React, { useState } from \"react\";\nimport CourseForm from \"./CourseForm\";\n\n// import all api functions with wild card reference\nimport * as courseApi from \"../api/courseApi\";\n\n// import toast notifications\nimport { toast } from \"react-toastify\";\n\n/** Arrow function component with props received */\nconst ManageCoursePage = (props) => {\n  /**\n   *  - declare client side validation state\n   *  - initialise with empty object */\n  const [errors, setErrors] = useState({});\n  /**\n   *  - declare state to hold course form data\n   *  - initialise with an empty course object\n   * */\n  const [course, setCourse] = useState({\n    id: null,\n    slug: \"\",\n    title: \"\",\n    authorId: \"\",\n    categroy: \"\",\n  });\n\n  // declare change handler for form inputs\n  function handleChange(event) {\n    /**\n     *  - use ...spread operator to copy state for editing\n     *  - set value passed in by form event based on the\n     *    name property of element e.g.\n     *    if attribute name=\"title\",\n     *    then value will be stored in course.title\n     *    and intialised to a variable prop [event.target.name]\n     *    called a Computed Property\n     *    which can be used by each form input.\n     *  - pass updated course to setCourse function*/\n    const updatedCourse = {\n      ...course,\n      [event.target.name]: event.target.value,\n    };\n    setCourse(updatedCourse);\n  }\n\n  // form validation function\n  function formIsValid() {\n    // declare local errors object\n    const _errors = {};\n\n    // validate form fields\n    if (!course.title) _errors.title = \"Title is required\";\n    if (!course.authorId) _errors.authorId = \"Author ID is required\";\n    if (!course.category) _errors.category = \"Category is required\";\n\n    // pass validation error result\n    setErrors(_errors);\n\n    // form is valid if the errors object has no properties\n    return Object.keys(_errors).length === 0;\n    /**\n     *  the Object.keys returns an array of an object's keys.\n     *  if the array of keys for the _errors' object is 0 then\n     *  the errors object has no properties.\n     */\n  }\n\n  // declare submit handler\n  // automatically receives an event from browser\n  function handleSubmit(event) {\n    // handle form validation\n    /** if the form is not valid then do nothing. */\n    if (!formIsValid()) return;\n\n    // to handle event on client, call prevent default post to server\n    event.preventDefault();\n\n    // call save api function and pass the course held in state\n    courseApi\n      .saveCourse(course)\n      /** all the api functions return a promise so we could\n       *  declare .then() to specify what should happen after\n       *  the saveCourse is completed.\n       */\n      .then(() => {\n        // redirect back to CoursesPage\n        props.history.push(\"/courses\");\n        /** since Add Course was loaded via\n         * React Router's Route we have access to\n         * React Router's history object on props.\n         * So we can programmatically redirect the\n         * user after the save is completed. */\n\n        // display notification after success save\n        toast.success(\"Course saved.\");\n      });\n  }\n  return (\n    <>\n      <h2>Manage Course</h2>\n      {/** Pass down to CourseForm child component via props\n       *  - pass down course state object\n       *  - pass down change handler\n       *  - pass down save form handler\n       *  - pass down validation errors */}\n      <CourseForm\n        course={course}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n        errors={errors}\n      />\n    </>\n  );\n};\n\nexport default ManageCoursePage;\n\n// then create a route in App.js\n"]},"metadata":{},"sourceType":"module"}