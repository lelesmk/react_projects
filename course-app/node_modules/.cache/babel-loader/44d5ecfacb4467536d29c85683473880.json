{"ast":null,"code":"var _jsxFileName = \"/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/AuthorDropDown.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { getAuthors } from \"../api/authorApi\";\n\nfunction AuthorDropDown() {\n  // 1. Set initial value of state and return current value\n  const [authorOptions, setAuthorOptions] = useState([{\n    value: \"\",\n    label: \"Loading...\"\n  }]); // 4. Stop use from interacting with dropdown while loading\n\n  const [loading, setLoading] = useState(true); // 6. Control dropdown value selected in state and set initial value\n\n  const [value, setValue] = useState(\"Select author\");\n  useEffect(() =>\n  /** first parameter is a function to execute when\n   *  the side effect runs */\n  {\n    // 5. Set unmounted flag to set state only if use is still on the page\n    let unmounted = false; // 3. Fetch data from a API if use is still mounted\n\n    if (!unmounted) {\n      getAuthors().then(authors => setAuthorOptions(authors.map(({\n        id,\n        name\n      }) => ({\n        value: id,\n        label: name\n      }))));\n      console.log(\"authors in state: \" + this.authors); // 4. Enable dropdown after loading\n\n      setLoading(false);\n    } // on unmount -> 5\n\n\n    return () => {\n      unmounted = true;\n    };\n  },\n  /** second parameter determines when the side effect runs.\n   *  In our case this is just after the component first\n   *  renders because we have specified an empty array */\n  []);\n  debugger; // 2. Map current value of state to select dropdown options\n\n  return (\n    /*#__PURE__*/\n\n    /** diabable while loading -> 4\n     *  bind value in state to value prop on select element -> 6\n     *  update this state in a change event listener with onChange prop ->6\n     */\n    React.createElement(\"select\", {\n      disabled: loading,\n      value: value,\n      onChange: event => setValue(event.currentTarget.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }, authorOptions.map((value, label) =>\n    /*#__PURE__*/\n\n    /** render the relevant option element */\n    React.createElement(\"option\", {\n      key: value,\n      value: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, label)))\n  );\n}\n\nexport default AuthorDropDown;","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/AuthorDropDown.js"],"names":["React","useState","useEffect","getAuthors","AuthorDropDown","authorOptions","setAuthorOptions","value","label","loading","setLoading","setValue","unmounted","then","authors","map","id","name","console","log","event","currentTarget"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,SAASC,cAAT,GAA0B;AACxB;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,CACjD;AAAEM,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,KAAK,EAAE;AAApB,GADiD,CAAD,CAAlD,CAFwB,CAMxB;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC,CAPwB,CASxB;;AACA,QAAM,CAACM,KAAD,EAAQI,QAAR,IAAoBV,QAAQ,CAAC,eAAD,CAAlC;AAEAC,EAAAA,SAAS,CACP;AACE;;AAEA;AACE;AACA,QAAIU,SAAS,GAAG,KAAhB,CAFF,CAIE;;AACA,QAAI,CAACA,SAAL,EAAgB;AACdT,MAAAA,UAAU,GAAGU,IAAb,CAAmBC,OAAD,IAChBR,gBAAgB,CACdQ,OAAO,CAACC,GAAR,CAAY,CAAC;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,OAAD,MAAmB;AAAEV,QAAAA,KAAK,EAAES,EAAT;AAAaR,QAAAA,KAAK,EAAES;AAApB,OAAnB,CAAZ,CADc,CADlB;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuB,KAAKL,OAAxC,EANc,CAOd;;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAdH,CAgBE;;;AACA,WAAO,MAAM;AACXE,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GAxBI;AAyBP;;;AAGA,IA5BO,CAAT;AA8BA,WA1CwB,CA2CxB;;AACA;AAAA;;AACE;;;;AAKA;AACE,MAAA,QAAQ,EAAEH,OADZ;AAEE,MAAA,KAAK,EAAEF,KAFT;AAGE,MAAA,QAAQ,EAAGa,KAAD,IAAWT,QAAQ,CAACS,KAAK,CAACC,aAAN,CAAoBd,KAArB,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGF,aAAa,CAACU,GAAd,CAAkB,CAACR,KAAD,EAAQC,KAAR;AAAA;;AACjB;AACA;AAAQ,MAAA,GAAG,EAAED,KAAb;AAAoB,MAAA,KAAK,EAAEA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,KADH,CAFD,CANH;AANF;AAoBD;;AAED,eAAeJ,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getAuthors } from \"../api/authorApi\";\n\nfunction AuthorDropDown() {\n  // 1. Set initial value of state and return current value\n  const [authorOptions, setAuthorOptions] = useState([\n    { value: \"\", label: \"Loading...\" },\n  ]);\n\n  // 4. Stop use from interacting with dropdown while loading\n  const [loading, setLoading] = useState(true);\n\n  // 6. Control dropdown value selected in state and set initial value\n  const [value, setValue] = useState(\"Select author\");\n\n  useEffect(\n    () =>\n      /** first parameter is a function to execute when\n       *  the side effect runs */\n      {\n        // 5. Set unmounted flag to set state only if use is still on the page\n        let unmounted = false;\n\n        // 3. Fetch data from a API if use is still mounted\n        if (!unmounted) {\n          getAuthors().then((authors) =>\n            setAuthorOptions(\n              authors.map(({ id, name }) => ({ value: id, label: name }))\n            )\n          );\n          console.log(\"authors in state: \" + this.authors);\n          // 4. Enable dropdown after loading\n          setLoading(false);\n        }\n\n        // on unmount -> 5\n        return () => {\n          unmounted = true;\n        };\n      },\n    /** second parameter determines when the side effect runs.\n     *  In our case this is just after the component first\n     *  renders because we have specified an empty array */\n    []\n  );\n  debugger;\n  // 2. Map current value of state to select dropdown options\n  return (\n    /** diabable while loading -> 4\n     *  bind value in state to value prop on select element -> 6\n     *  update this state in a change event listener with onChange prop ->6\n     */\n\n    <select\n      disabled={loading}\n      value={value}\n      onChange={(event) => setValue(event.currentTarget.value)}\n    >\n      {/** iterate current value and label props in state*/}\n      {authorOptions.map((value, label) => (\n        /** render the relevant option element */\n        <option key={value} value={value}>\n          {label}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nexport default AuthorDropDown;\n"]},"metadata":{},"sourceType":"module"}