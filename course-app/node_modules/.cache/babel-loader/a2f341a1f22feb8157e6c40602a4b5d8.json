{"ast":null,"code":"/**\n *  APIs to GET, SAVE, DELETE Authors\n */\nimport { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = process.env.REACT_APP_API_URL + \"/authors/\";\nexport function getAuthors() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\nexport function getAuthorById(id) {\n  return fetch(`baseUrl ${id}`).then(response => {\n    if (!response.ok) throw new Error(\"Network response was not ok.\");\n    return response.json().then(authors => {\n      if (authors.length !== 1) throw new Error(\"Author not found: \" + id);\n      return authors[0]; // should only find one author for a given slug, so return it.\n    });\n  }).catch(handleError);\n}\nexport function saveAuthor(author) {\n  return fetch(baseUrl + (author.id || \"\"), {\n    method: author.id ? \"PUT\" : \"POST\",\n    // POST for create, PUT to update when id already exists.\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(author)\n  }).then(handleResponse).catch(handleError);\n}\nexport function deleteAuthor(authorId) {\n  return fetch(baseUrl + authorId, {\n    method: \"DELETE\"\n  }).then(handleResponse).catch(handleError);\n}","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/api/authorApi.js"],"names":["handleResponse","handleError","baseUrl","process","env","REACT_APP_API_URL","getAuthors","fetch","then","catch","getAuthorById","id","response","ok","Error","json","authors","length","saveAuthor","author","method","headers","body","JSON","stringify","deleteAuthor","authorId"],"mappings":"AAAA;;;AAIA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,YAA5C;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,WAAhD;AAEA,OAAO,SAASC,UAAT,GAAsB;AAC3B,SAAOC,KAAK,CAACL,OAAD,CAAL,CAAeM,IAAf,CAAoBR,cAApB,EAAoCS,KAApC,CAA0CR,WAA1C,CAAP;AACD;AAED,OAAO,SAASS,aAAT,CAAuBC,EAAvB,EAA2B;AAChC,SAAOJ,KAAK,CAAE,WAAUI,EAAG,EAAf,CAAL,CACJH,IADI,CACEI,QAAD,IAAc;AAClB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AAClB,WAAOF,QAAQ,CAACG,IAAT,GAAgBP,IAAhB,CAAsBQ,OAAD,IAAa;AACvC,UAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B,MAAM,IAAIH,KAAJ,CAAU,uBAAuBH,EAAjC,CAAN;AAC1B,aAAOK,OAAO,CAAC,CAAD,CAAd,CAFuC,CAEpB;AACpB,KAHM,CAAP;AAID,GAPI,EAQJP,KARI,CAQER,WARF,CAAP;AASD;AAED,OAAO,SAASiB,UAAT,CAAoBC,MAApB,EAA4B;AACjC,SAAOZ,KAAK,CAACL,OAAO,IAAIiB,MAAM,CAACR,EAAP,IAAa,EAAjB,CAAR,EAA8B;AACxCS,IAAAA,MAAM,EAAED,MAAM,CAACR,EAAP,GAAY,KAAZ,GAAoB,MADY;AACJ;AACpCU,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAF+B;AAGxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AAHkC,GAA9B,CAAL,CAKJX,IALI,CAKCR,cALD,EAMJS,KANI,CAMER,WANF,CAAP;AAOD;AAED,OAAO,SAASwB,YAAT,CAAsBC,QAAtB,EAAgC;AACrC,SAAOnB,KAAK,CAACL,OAAO,GAAGwB,QAAX,EAAqB;AAAEN,IAAAA,MAAM,EAAE;AAAV,GAArB,CAAL,CACJZ,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP;AAGD","sourcesContent":["/**\n *  APIs to GET, SAVE, DELETE Authors\n */\n\nimport { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = process.env.REACT_APP_API_URL + \"/authors/\";\n\nexport function getAuthors() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\n\nexport function getAuthorById(id) {\n  return fetch(`baseUrl ${id}`)\n    .then((response) => {\n      if (!response.ok) throw new Error(\"Network response was not ok.\");\n      return response.json().then((authors) => {\n        if (authors.length !== 1) throw new Error(\"Author not found: \" + id);\n        return authors[0]; // should only find one author for a given slug, so return it.\n      });\n    })\n    .catch(handleError);\n}\n\nexport function saveAuthor(author) {\n  return fetch(baseUrl + (author.id || \"\"), {\n    method: author.id ? \"PUT\" : \"POST\", // POST for create, PUT to update when id already exists.\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify(author),\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function deleteAuthor(authorId) {\n  return fetch(baseUrl + authorId, { method: \"DELETE\" })\n    .then(handleResponse)\n    .catch(handleError);\n}\n"]},"metadata":{},"sourceType":"module"}