{"ast":null,"code":"var _jsxFileName = \"/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/ManageCoursePage.js\";\n\n/* eslint-disable no-restricted-globals */\nimport React, { useState } from \"react\";\nimport CourseForm from \"./CourseForm\"; // import all api functions with wild card reference\n\nimport * as courseApi from \"../api/courseApi\";\n/** Arrow function component with props received */\n\nconst ManageCoursePage = props => {\n  /**\n   *  - declare state to hold course form data\n   *  - initialise with an empty course\n   * */\n  const [course, setCourse] = useState({\n    id: null,\n    slug: \"\",\n    title: \"\",\n    authorId: \"\",\n    categroy: \"\"\n  }); // declare change handler for form inputs\n\n  function handleChange(event) {\n    /**\n     *  - use ...spread operator to copy state for editing\n     *  - set value passed in by form event based on the\n     *    name property of element e.g.\n     *    if attribute name=\"title\",\n     *    then value will be stored in course.title\n     *    and intialised to a variable prop [event.target.name]\n     *    called a Computed Property\n     *    which can be used by each form input.\n     *  - pass updated course to setCourse function*/\n    const updatedCourse = { ...course,\n      [event.target.name]: event.target.value\n    };\n    setCourse(updatedCourse);\n  } // declare submit handler\n\n\n  function handleSubmit(event) {\n    // automatically receives an event from browser\n    // to handle event on client, call prevent default post to server\n    event.preventDefault(); // call save api function and pass the course held in state\n\n    courseApi.saveCourse(course);\n    /** all the api functions return a promise so we could\n     *  declare .then() to specify what should happen after\n     *  the saveCourse is completed.\n     */\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Manage Course\"), /*#__PURE__*/React.createElement(CourseForm, {\n    course: course,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ManageCoursePage; // then create a route in App.js","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/ManageCoursePage.js"],"names":["React","useState","CourseForm","courseApi","ManageCoursePage","props","course","setCourse","id","slug","title","authorId","categroy","handleChange","event","updatedCourse","target","name","value","handleSubmit","preventDefault","saveCourse"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,OAAO,KAAKC,SAAZ,MAA2B,kBAA3B;AAEA;;AACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC;;;;AAIA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AACnCO,IAAAA,EAAE,EAAE,IAD+B;AAEnCC,IAAAA,IAAI,EAAE,EAF6B;AAGnCC,IAAAA,KAAK,EAAE,EAH4B;AAInCC,IAAAA,QAAQ,EAAE,EAJyB;AAKnCC,IAAAA,QAAQ,EAAE;AALyB,GAAD,CAApC,CALkC,CAalC;;AACA,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B;;;;;;;;;;AAUA,UAAMC,aAAa,GAAG,EACpB,GAAGT,MADiB;AAEpB,OAACQ,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AAFd,KAAtB;AAIAX,IAAAA,SAAS,CAACQ,aAAD,CAAT;AACD,GA9BiC,CAgClC;;;AACA,WAASI,YAAT,CAAsBL,KAAtB,EAA6B;AAC3B;AAEA;AACAA,IAAAA,KAAK,CAACM,cAAN,GAJ2B,CAM3B;;AACAjB,IAAAA,SAAS,CAACkB,UAAV,CAAqBf,MAArB;AACA;;;;AAID;;AACD,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAME,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEA,MAApB;AAA4B,IAAA,QAAQ,EAAEO,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAxDD;;AA0DA,eAAeT,gBAAf,C,CAEA","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport React, { useState } from \"react\";\nimport CourseForm from \"./CourseForm\";\n\n// import all api functions with wild card reference\nimport * as courseApi from \"../api/courseApi\";\n\n/** Arrow function component with props received */\nconst ManageCoursePage = (props) => {\n  /**\n   *  - declare state to hold course form data\n   *  - initialise with an empty course\n   * */\n  const [course, setCourse] = useState({\n    id: null,\n    slug: \"\",\n    title: \"\",\n    authorId: \"\",\n    categroy: \"\",\n  });\n\n  // declare change handler for form inputs\n  function handleChange(event) {\n    /**\n     *  - use ...spread operator to copy state for editing\n     *  - set value passed in by form event based on the\n     *    name property of element e.g.\n     *    if attribute name=\"title\",\n     *    then value will be stored in course.title\n     *    and intialised to a variable prop [event.target.name]\n     *    called a Computed Property\n     *    which can be used by each form input.\n     *  - pass updated course to setCourse function*/\n    const updatedCourse = {\n      ...course,\n      [event.target.name]: event.target.value,\n    };\n    setCourse(updatedCourse);\n  }\n\n  // declare submit handler\n  function handleSubmit(event) {\n    // automatically receives an event from browser\n\n    // to handle event on client, call prevent default post to server\n    event.preventDefault();\n\n    // call save api function and pass the course held in state\n    courseApi.saveCourse(course);\n    /** all the api functions return a promise so we could\n     *  declare .then() to specify what should happen after\n     *  the saveCourse is completed.\n     */\n  }\n  return (\n    <>\n      <h2>Manage Course</h2>\n      {/** Pass down to CourseForm child component via props\n       *  - pass down course state object\n       *  - pass down change handler\n       *  - pass down save form handler */}\n      <CourseForm course={course} onChange={handleChange} />\n    </>\n  );\n};\n\nexport default ManageCoursePage;\n\n// then create a route in App.js\n"]},"metadata":{},"sourceType":"module"}