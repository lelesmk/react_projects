{"ast":null,"code":"import dispatcher from \"../appDispatcher\"; // import courseApi to implement action calls to api\n\nimport * as courseApi from \"../api/courseApi\";\nimport actionTypes from \"./actionTypes\"; // ! the below function is called an Action Creator ! //\n\nexport function saveCourse(course) {\n  // call courseApi to save a course passed in by this function\n\n  /** return the promise from the call to api so\n   *  the caller of this function will be notified\n   *  when the promise resolves/completes */\n  return courseApi.saveCourse(course).then(savedCourse => {\n    // handle saved course response\n\n    /** use flux dispatcher to notify all the stores\n     *  that a course was just created. Stores will\n     *  take the data payload dispatched here and\n     *  put it to use.\n     */\n    dispatcher.dispatch( // an action is an object with actionType property\n    {\n      // ! the below properties declared make up the Action ! //\n      // required property\n      // actionType: \"CREATE_COURSE\",\n\n      /**\n       *  actionType is hardcoded as a magic string.\n       *  this requires carefully typing it the\n       *  exact same way when declaring the store\n       *  which will handle the action.\n       *\n       *  instead its best practice to create a\n       *  constant file that contains a list of\n       *  all the actionTypes used in the system\n       *  (actionType is a constant so assigned\n       *  with uppercase.)\n       *\n       */\n      // call actionTypes object instead of hardcoding\n\n      /** call action based on whether a we're working on\n       *  an existing course or new course.\n       *  - if course has an id, then UPDATE else CREATE\n       */\n      actionType: actionTypes.CREATE_COURSE,\n      // optional properties to pass with action object\n      course: savedCourse\n    });\n  });\n} // declare flux call to api\n\nexport function loadCourses() {\n  return courseApi.getCourses().then(courses => {\n    // dispatch courses array payload with action\n    dispatcher.dispatch({\n      actionType: actionTypes.LOAD_COURSES,\n      courses: courses\n    });\n  }); // Next, update the courseStore to handle this actionType\n}","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/actions/courseActions.js"],"names":["dispatcher","courseApi","actionTypes","saveCourse","course","then","savedCourse","dispatch","actionType","CREATE_COURSE","loadCourses","getCourses","courses","LOAD_COURSES"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB,C,CAEA;;AACA,OAAO,KAAKC,SAAZ,MAA2B,kBAA3B;AAEA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACjC;;AACA;;;AAGA,SAAOH,SAAS,CAACE,UAAV,CAAqBC,MAArB,EAA6BC,IAA7B,CAAmCC,WAAD,IAAiB;AACxD;;AACA;;;;;AAKAN,IAAAA,UAAU,CAACO,QAAX,EACE;AACA;AACE;AAEA;AAEA;;AACA;;;;;;;;;;;;;AAcA;;AAEA;;;;AAIAC,MAAAA,UAAU,EAAEN,WAAW,CAACO,aA1B1B;AA4BE;AACAL,MAAAA,MAAM,EAAEE;AA7BV,KAFF;AAkCD,GAzCM,CAAP;AA0CD,C,CAED;;AACA,OAAO,SAASI,WAAT,GAAuB;AAC5B,SAAOT,SAAS,CAACU,UAAV,GAAuBN,IAAvB,CAA6BO,OAAD,IAAa;AAC9C;AACAZ,IAAAA,UAAU,CAACO,QAAX,CAAoB;AAClBC,MAAAA,UAAU,EAAEN,WAAW,CAACW,YADN;AAElBD,MAAAA,OAAO,EAAEA;AAFS,KAApB;AAID,GANM,CAAP,CAD4B,CAQ5B;AACD","sourcesContent":["import dispatcher from \"../appDispatcher\";\n\n// import courseApi to implement action calls to api\nimport * as courseApi from \"../api/courseApi\";\n\nimport actionTypes from \"./actionTypes\";\n\n// ! the below function is called an Action Creator ! //\nexport function saveCourse(course) {\n  // call courseApi to save a course passed in by this function\n  /** return the promise from the call to api so\n   *  the caller of this function will be notified\n   *  when the promise resolves/completes */\n  return courseApi.saveCourse(course).then((savedCourse) => {\n    // handle saved course response\n    /** use flux dispatcher to notify all the stores\n     *  that a course was just created. Stores will\n     *  take the data payload dispatched here and\n     *  put it to use.\n     */\n    dispatcher.dispatch(\n      // an action is an object with actionType property\n      {\n        // ! the below properties declared make up the Action ! //\n\n        // required property\n\n        // actionType: \"CREATE_COURSE\",\n        /**\n         *  actionType is hardcoded as a magic string.\n         *  this requires carefully typing it the\n         *  exact same way when declaring the store\n         *  which will handle the action.\n         *\n         *  instead its best practice to create a\n         *  constant file that contains a list of\n         *  all the actionTypes used in the system\n         *  (actionType is a constant so assigned\n         *  with uppercase.)\n         *\n         */\n\n        // call actionTypes object instead of hardcoding\n\n        /** call action based on whether a we're working on\n         *  an existing course or new course.\n         *  - if course has an id, then UPDATE else CREATE\n         */\n        actionType: actionTypes.CREATE_COURSE,\n\n        // optional properties to pass with action object\n        course: savedCourse,\n      }\n    );\n  });\n}\n\n// declare flux call to api\nexport function loadCourses() {\n  return courseApi.getCourses().then((courses) => {\n    // dispatch courses array payload with action\n    dispatcher.dispatch({\n      actionType: actionTypes.LOAD_COURSES,\n      courses: courses,\n    });\n  });\n  // Next, update the courseStore to handle this actionType\n}\n"]},"metadata":{},"sourceType":"module"}