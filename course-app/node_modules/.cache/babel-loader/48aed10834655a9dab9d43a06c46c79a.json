{"ast":null,"code":"var _jsxFileName = \"/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/CoursesPage.js\";\nimport React, { useState, useEffect } from \"react\"; // import function to call from mock api\n\nimport courseStore from \"../stores/courseStore\";\nimport authorStore from \"../stores/authorStore\";\nimport { loadCourses, deleteCourse } from \"../actions/courseActions\";\nimport { loadAuthors } from \"../actions/authorActions\"; // import logic into our page markup\n\nimport CourseList from \"../components/CourseList\";\nimport { Link } from \"react-router-dom\"; // FUNCTION COMPONENT WITH HOOKS\n\n/**======================================= */\n\nfunction CoursesPage() {\n  // declare state with useState hook\n\n  /** - useState hook returns an array with two values\n   *   [ nameOfSate, nameOfSetterMethod ]\n   *  - initialise state with the courses held in CourseStore\n   */\n  const [courses, setCourses] = useState(courseStore.getCourses());\n  const [authors, setAuthors] = useState(authorStore.getAuthors()); // call useEffect to make call to store to get courses\n\n  useEffect(() => {\n    // on MOUNTING: subsctibe to Flux store to listen for changes\n\n    /** addChangeListener accepts a function to call\n     *  when the store changes.\n     *  Remember to clean component when adding a change listener\n     *  on MOUNT by calling removeChangeListener when component\n     *  UNMOUNTS.\n     */\n    courseStore.addChangeListener(onChange);\n    authorStore.addChangeListener(onChange); // load courses if this request is made for the first time\n\n    /**\n     *  - check if courseStore has any courses loaded from api\n     *  - if no courses, then call loadCourses from imported courseActions\n     */\n\n    if (courseStore.getCourses().length === 0) loadCourses();\n    if (authorStore.getAuthors().length === 0) loadAuthors(); // on UNMOUNTING (navigating to a different page) return this function\n\n    /** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */\n\n    return () => courseStore.removeChangeListener(onChange); // clean up on unmount (navigate to a different page)\n  }, []); // set author state on mount\n  // useEffect(() => {\n  //   // on change in store get authors list\n  //   authorStore.addChangeListener(onChange);\n  //   // if authorStore is empty, load authors\n  //   if (authorStore.getAuthors().length === 0) loadAuthors();\n  //   return () => authorStore.removeChangeListener(onChange);\n  // }, []);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Courses\"), /*#__PURE__*/React.createElement(Link, {\n    to: \"/course\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, \"Add Course\"), /*#__PURE__*/React.createElement(CourseList, {\n    courses: courses,\n    deleteCourse: deleteCourse,\n    authors: authors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  })); // execute function when a course is added to the store\n\n  function onChange() {\n    // request courses from store and add/set to this component state\n    setCourses(courseStore.getCourses());\n    setAuthors(authorStore.getAuthors());\n    /** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */\n  } // SUMMARY OF STATE OF CONCERNS\n\n  /**\n   *  This separates Smart component (CoursesPage) from\n   *  the Dumb component (CourseList).\n   *  Our controller view / smart component\n   *    1. Requests courses from the store\n   *    2. Sets the state 'courses'\n   *    3. Passes that state (course array) to child\n   *       CourseList for rendering\n   *  The CourseList does nothing but define the markup\n   *  and receives an array of courses via props.\n   *\n   */\n\n} // CLASS COMPONENT WITH LIFECYCLE METHODS\n\n/**======================================= */\n// class CoursesPage extends React.Component {\n//   // store list of courses in state\n//   // store state by constructor\n//   //   constructor(props) {\n//   //     super(props);\n//   //     // declare state as an object\n//   //     this.state = {\n//   //       courses: [],\n//   //     };\n//   //   }\n//   // OR simply declare state without constructor\n//   state = {\n//     courses: [],\n//   };\n//   // call lifecycle method for making API calls\n//   componentDidMount() {\n//     // the component must be mounted before calling setSate()\n//     // /**\n//     //  *  - returns a promise based api - a future value\n//     //  *  - .then() handles the future response value */\n//     // getCourses().then(\n//     //   //   /**\n//     //   //    *  - function call will be resolved when the\n//     //   //    *    api call is completed.\n//     //   //    *  - the anonymous function(courses) receives an\n//     //   //    *    array of courses returned by getCourses() api call */\n//     //   function (courses) {\n//     //     //     /**\n//     //     //      *  - now we have a reference to the list of courses\n//     //     //      *    and ready to set state.\n//     //     //      *  - setSate accepts an object that describes the new\n//     //     //      *    new properties that we'd like to set in state.\n//     //     //      *  - set courses object with the courses list properties\n//     //     //      *    we've just received.*/\n//     //     this.setState({ courses: courses });\n//     //   }\n//     // );\n//     // more concise Arrow Function syntax\n//     getCourses().then((courses) => this.setState({ courses: courses }));\n//     /** what this says is:\n//      *  - getCourses from the api\n//      *  - when the api call completes, then\n//      *  - store the array of courses in state */\n//   }\n//   // display state in table\n//   render() {\n//     return (\n//       <>\n//         <h2>Courses</h2>\n//         <table className=\"table\">\n//           <thead>\n//             <tr>\n//               <th>Title</th>\n//               <th>Author ID</th>\n//               <th>Category</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {/** - iterate this state.courses and\n//              *   - call map on that array of courses.\n//              *   - map returns an array. */}\n//             {this.state.courses.map((course) => {\n//               return (\n//                 /** - for each course return a table row array.\n//                  *  - assign a unique key to child in array so\n//                  *  React can track each element when we create\n//                  *  multiple instances of an element in the array\n//                  *  using React components. Now when we add or remove\n//                  *  different elements (row is an element) React\n//                  *  can maintain proper state so the order of\n//                  *  these element doesn't get destroyed when we\n//                  *  re-render the application.\n//                  */\n//                 <tr key={course.id}>\n//                   <td>{course.title}</td>\n//                   <td>{course.authorId}</td>\n//                   <td>{course.category}</td>\n//                 </tr>\n//               );\n//             })}\n//           </tbody>\n//         </table>\n//       </>\n//     );\n//   }\n// }\n\n\nexport default CoursesPage;","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/CoursesPage.js"],"names":["React","useState","useEffect","courseStore","authorStore","loadCourses","deleteCourse","loadAuthors","CourseList","Link","CoursesPage","courses","setCourses","getCourses","authors","setAuthors","getAuthors","addChangeListener","onChange","length","removeChangeListener"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,0BAA1C;AACA,SAASC,WAAT,QAA4B,0BAA5B,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CAEA;;AACA;;AAEA,SAASC,WAAT,GAAuB;AACrB;;AACA;;;;AAIA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAACE,WAAW,CAACU,UAAZ,EAAD,CAAtC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAACG,WAAW,CAACY,UAAZ,EAAD,CAAtC,CAPqB,CASrB;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACd;;AACA;;;;;;AAMAC,IAAAA,WAAW,CAACc,iBAAZ,CAA8BC,QAA9B;AACAd,IAAAA,WAAW,CAACa,iBAAZ,CAA8BC,QAA9B,EATc,CAWd;;AACA;;;;;AAIA,QAAIf,WAAW,CAACU,UAAZ,GAAyBM,MAAzB,KAAoC,CAAxC,EAA2Cd,WAAW;AACtD,QAAID,WAAW,CAACY,UAAZ,GAAyBG,MAAzB,KAAoC,CAAxC,EAA2CZ,WAAW,GAjBxC,CAmBd;;AACA;;;;AAGA,WAAO,MAAMJ,WAAW,CAACiB,oBAAZ,CAAiCF,QAAjC,CAAb,CAvBc,CAuB2C;AAC1D,GAxBQ,EAwBN,EAxBM,CAAT,CAVqB,CAoCrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAGE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,SAAT;AAAmB,IAAA,SAAS,EAAC,iBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAWE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEP,OADX;AAEE,IAAA,YAAY,EAAEL,YAFhB;AAGE,IAAA,OAAO,EAAEQ,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF,CA7CqB,CAiErB;;AACA,WAASI,QAAT,GAAoB;AAClB;AACAN,IAAAA,UAAU,CAACT,WAAW,CAACU,UAAZ,EAAD,CAAV;AACAE,IAAAA,UAAU,CAACX,WAAW,CAACY,UAAZ,EAAD,CAAV;AACA;;;;AAID,GA1EoB,CA4ErB;;AACA;;;;;;;;;;;;;AAYD,C,CAED;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeN,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n// import function to call from mock api\nimport courseStore from \"../stores/courseStore\";\nimport authorStore from \"../stores/authorStore\";\n\nimport { loadCourses, deleteCourse } from \"../actions/courseActions\";\nimport { loadAuthors } from \"../actions/authorActions\";\n\n// import logic into our page markup\nimport CourseList from \"../components/CourseList\";\nimport { Link } from \"react-router-dom\";\n\n// FUNCTION COMPONENT WITH HOOKS\n/**======================================= */\n\nfunction CoursesPage() {\n  // declare state with useState hook\n  /** - useState hook returns an array with two values\n   *   [ nameOfSate, nameOfSetterMethod ]\n   *  - initialise state with the courses held in CourseStore\n   */\n  const [courses, setCourses] = useState(courseStore.getCourses());\n  const [authors, setAuthors] = useState(authorStore.getAuthors());\n\n  // call useEffect to make call to store to get courses\n  useEffect(() => {\n    // on MOUNTING: subsctibe to Flux store to listen for changes\n    /** addChangeListener accepts a function to call\n     *  when the store changes.\n     *  Remember to clean component when adding a change listener\n     *  on MOUNT by calling removeChangeListener when component\n     *  UNMOUNTS.\n     */\n    courseStore.addChangeListener(onChange);\n    authorStore.addChangeListener(onChange);\n\n    // load courses if this request is made for the first time\n    /**\n     *  - check if courseStore has any courses loaded from api\n     *  - if no courses, then call loadCourses from imported courseActions\n     */\n    if (courseStore.getCourses().length === 0) loadCourses();\n    if (authorStore.getAuthors().length === 0) loadAuthors();\n\n    // on UNMOUNTING (navigating to a different page) return this function\n    /** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */\n    return () => courseStore.removeChangeListener(onChange); // clean up on unmount (navigate to a different page)\n  }, []);\n\n  // set author state on mount\n  // useEffect(() => {\n  //   // on change in store get authors list\n  //   authorStore.addChangeListener(onChange);\n  //   // if authorStore is empty, load authors\n  //   if (authorStore.getAuthors().length === 0) loadAuthors();\n  //   return () => authorStore.removeChangeListener(onChange);\n  // }, []);\n\n  return (\n    <>\n      <h2>Courses</h2>\n      {/** - add course button to ManageCoursePage component */}\n      <Link to=\"/course\" className=\"btn btn-primary\">\n        Add Course\n      </Link>\n      {/** - call child component\n       *   - use props to pass courses array\n       *     from parent to child\n       *  (props are like html attributes for react components)\n       */}\n      <CourseList\n        courses={courses}\n        deleteCourse={deleteCourse}\n        authors={authors}\n      />\n    </>\n  );\n\n  // execute function when a course is added to the store\n  function onChange() {\n    // request courses from store and add/set to this component state\n    setCourses(courseStore.getCourses());\n    setAuthors(authorStore.getAuthors());\n    /** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */\n  }\n\n  // SUMMARY OF STATE OF CONCERNS\n  /**\n   *  This separates Smart component (CoursesPage) from\n   *  the Dumb component (CourseList).\n   *  Our controller view / smart component\n   *    1. Requests courses from the store\n   *    2. Sets the state 'courses'\n   *    3. Passes that state (course array) to child\n   *       CourseList for rendering\n   *  The CourseList does nothing but define the markup\n   *  and receives an array of courses via props.\n   *\n   */\n}\n\n// CLASS COMPONENT WITH LIFECYCLE METHODS\n/**======================================= */\n// class CoursesPage extends React.Component {\n//   // store list of courses in state\n//   // store state by constructor\n//   //   constructor(props) {\n//   //     super(props);\n\n//   //     // declare state as an object\n//   //     this.state = {\n//   //       courses: [],\n//   //     };\n//   //   }\n\n//   // OR simply declare state without constructor\n//   state = {\n//     courses: [],\n//   };\n\n//   // call lifecycle method for making API calls\n//   componentDidMount() {\n//     // the component must be mounted before calling setSate()\n\n//     // /**\n//     //  *  - returns a promise based api - a future value\n//     //  *  - .then() handles the future response value */\n//     // getCourses().then(\n//     //   //   /**\n//     //   //    *  - function call will be resolved when the\n//     //   //    *    api call is completed.\n//     //   //    *  - the anonymous function(courses) receives an\n//     //   //    *    array of courses returned by getCourses() api call */\n//     //   function (courses) {\n//     //     //     /**\n//     //     //      *  - now we have a reference to the list of courses\n//     //     //      *    and ready to set state.\n//     //     //      *  - setSate accepts an object that describes the new\n//     //     //      *    new properties that we'd like to set in state.\n//     //     //      *  - set courses object with the courses list properties\n//     //     //      *    we've just received.*/\n//     //     this.setState({ courses: courses });\n//     //   }\n//     // );\n//     // more concise Arrow Function syntax\n//     getCourses().then((courses) => this.setState({ courses: courses }));\n//     /** what this says is:\n//      *  - getCourses from the api\n//      *  - when the api call completes, then\n//      *  - store the array of courses in state */\n//   }\n\n//   // display state in table\n//   render() {\n//     return (\n//       <>\n//         <h2>Courses</h2>\n//         <table className=\"table\">\n//           <thead>\n//             <tr>\n//               <th>Title</th>\n//               <th>Author ID</th>\n//               <th>Category</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {/** - iterate this state.courses and\n//              *   - call map on that array of courses.\n//              *   - map returns an array. */}\n//             {this.state.courses.map((course) => {\n//               return (\n//                 /** - for each course return a table row array.\n//                  *  - assign a unique key to child in array so\n//                  *  React can track each element when we create\n//                  *  multiple instances of an element in the array\n//                  *  using React components. Now when we add or remove\n//                  *  different elements (row is an element) React\n//                  *  can maintain proper state so the order of\n//                  *  these element doesn't get destroyed when we\n//                  *  re-render the application.\n//                  */\n//                 <tr key={course.id}>\n//                   <td>{course.title}</td>\n//                   <td>{course.authorId}</td>\n//                   <td>{course.category}</td>\n//                 </tr>\n//               );\n//             })}\n//           </tbody>\n//         </table>\n//       </>\n//     );\n//   }\n// }\n\nexport default CoursesPage;\n"]},"metadata":{},"sourceType":"module"}