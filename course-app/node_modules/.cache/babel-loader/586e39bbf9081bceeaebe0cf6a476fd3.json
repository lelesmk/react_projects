{"ast":null,"code":"/**\n *  APIs to GET, SAVE, DELETE Authors\n */import{handleResponse,handleError}from\"./apiUtils\";var baseUrl=process.env.REACT_APP_API_URL+\"/authors/\";export function getAuthors(){return fetch(baseUrl).then(handleResponse).catch(handleError);}export function getAuthorById(id){return fetch(\"baseUrl \".concat(id)).then(function(response){if(!response.ok)throw new Error(\"Network response was not ok.\");return response.json().then(function(authors){if(authors.length!==1)throw new Error(\"Author not found: \"+id);return authors[0];// should only find one author for a given slug, so return it.\n});}).catch(handleError);}export function saveAuthor(author){return fetch(baseUrl+(author.id||\"\"),{method:author.id?\"PUT\":\"POST\",// POST for create, PUT to update when id already exists.\nheaders:{\"content-type\":\"application/json\"},body:JSON.stringify(author)}).then(handleResponse).catch(handleError);}export function deleteAuthor(authorId){return fetch(baseUrl+authorId,{method:\"DELETE\"}).then(handleResponse).catch(handleError);}","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/api/authorApi.js"],"names":["handleResponse","handleError","baseUrl","process","env","REACT_APP_API_URL","getAuthors","fetch","then","catch","getAuthorById","id","response","ok","Error","json","authors","length","saveAuthor","author","method","headers","body","JSON","stringify","deleteAuthor","authorId"],"mappings":"AAAA;;GAIA,OAASA,cAAT,CAAyBC,WAAzB,KAA4C,YAA5C,CACA,GAAMC,CAAAA,OAAO,CAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,CAAgC,WAAhD,CAEA,MAAO,SAASC,CAAAA,UAAT,EAAsB,CAC3B,MAAOC,CAAAA,KAAK,CAACL,OAAD,CAAL,CAAeM,IAAf,CAAoBR,cAApB,EAAoCS,KAApC,CAA0CR,WAA1C,CAAP,CACD,CAED,MAAO,SAASS,CAAAA,aAAT,CAAuBC,EAAvB,CAA2B,CAChC,MAAOJ,CAAAA,KAAK,mBAAYI,EAAZ,EAAL,CACJH,IADI,CACC,SAACI,QAAD,CAAc,CAClB,GAAI,CAACA,QAAQ,CAACC,EAAd,CAAkB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,8BAAV,CAAN,CAClB,MAAOF,CAAAA,QAAQ,CAACG,IAAT,GAAgBP,IAAhB,CAAqB,SAACQ,OAAD,CAAa,CACvC,GAAIA,OAAO,CAACC,MAAR,GAAmB,CAAvB,CAA0B,KAAM,IAAIH,CAAAA,KAAJ,CAAU,qBAAuBH,EAAjC,CAAN,CAC1B,MAAOK,CAAAA,OAAO,CAAC,CAAD,CAAd,CAAmB;AACpB,CAHM,CAAP,CAID,CAPI,EAQJP,KARI,CAQER,WARF,CAAP,CASD,CAED,MAAO,SAASiB,CAAAA,UAAT,CAAoBC,MAApB,CAA4B,CACjC,MAAOZ,CAAAA,KAAK,CAACL,OAAO,EAAIiB,MAAM,CAACR,EAAP,EAAa,EAAjB,CAAR,CAA8B,CACxCS,MAAM,CAAED,MAAM,CAACR,EAAP,CAAY,KAAZ,CAAoB,MADY,CACJ;AACpCU,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAF+B,CAGxCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAHkC,CAA9B,CAAL,CAKJX,IALI,CAKCR,cALD,EAMJS,KANI,CAMER,WANF,CAAP,CAOD,CAED,MAAO,SAASwB,CAAAA,YAAT,CAAsBC,QAAtB,CAAgC,CACrC,MAAOnB,CAAAA,KAAK,CAACL,OAAO,CAAGwB,QAAX,CAAqB,CAAEN,MAAM,CAAE,QAAV,CAArB,CAAL,CACJZ,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP,CAGD","sourcesContent":["/**\n *  APIs to GET, SAVE, DELETE Authors\n */\n\nimport { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = process.env.REACT_APP_API_URL + \"/authors/\";\n\nexport function getAuthors() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\n\nexport function getAuthorById(id) {\n  return fetch(`baseUrl ${id}`)\n    .then((response) => {\n      if (!response.ok) throw new Error(\"Network response was not ok.\");\n      return response.json().then((authors) => {\n        if (authors.length !== 1) throw new Error(\"Author not found: \" + id);\n        return authors[0]; // should only find one author for a given slug, so return it.\n      });\n    })\n    .catch(handleError);\n}\n\nexport function saveAuthor(author) {\n  return fetch(baseUrl + (author.id || \"\"), {\n    method: author.id ? \"PUT\" : \"POST\", // POST for create, PUT to update when id already exists.\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify(author),\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function deleteAuthor(authorId) {\n  return fetch(baseUrl + authorId, { method: \"DELETE\" })\n    .then(handleResponse)\n    .catch(handleError);\n}\n"]},"metadata":{},"sourceType":"module"}