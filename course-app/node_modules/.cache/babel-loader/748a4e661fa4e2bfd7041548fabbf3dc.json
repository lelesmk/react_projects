{"ast":null,"code":"var _jsxFileName = \"/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/AuthorDropDown.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { getAuthors } from \"../api/authorApi\";\n\nfunction AuthorDropDown(props) {\n  // 1. Set initial value of state and return current value\n  const [authorOptions, setAuthorOptions] = useState([{\n    value: \"\",\n    label: \"Loading...\"\n  }]); // 4. Stop use from interacting with dropdown while loading\n\n  const [loading, setLoading] = useState(true); // 6. Control dropdown value selected in state and set initial value -> ManageCoursePage change handler\n\n  const [value, setValue] = useState(\"Select author\");\n  let wrapperClass = \"form-group\"; // Dynamically add a Bootstrap class name\n\n  if (props.error.length > 0) {\n    wrapperClass += \" has-error\";\n    /** Bootstrapper has-error class will add a\n     *  red line around the input when it is in\n     *  an error state.\n     */\n  }\n\n  useEffect(() =>\n  /** first parameter is a function to execute when\n   *  the side effect runs */\n  {\n    // 5. Set unmounted flag to set state only if use is still on the page\n    let unmounted = false; // 3. Fetch data from a API if use is still mounted\n\n    if (!unmounted) {\n      getAuthors().then(_authorOptions => setAuthorOptions(_authorOptions.map(({\n        id,\n        name\n      }) => ({\n        value: id,\n        label: name\n      })))); // 4. Enable dropdown after loading\n\n      setLoading(false);\n    } // on unmount -> 5\n\n\n    return () => {\n      unmounted = true;\n    };\n  },\n  /** second parameter determines when the side effect runs.\n   *  In our case this is just after the component first\n   *  renders because we have specified an empty array */\n  []);\n  debugger; // 2. Map current value of state to select dropdown options\n\n  return (\n    /*#__PURE__*/\n\n    /** diabable while loading -> 4\n     *  bind value in state to value prop on select element -> 6\n     *  update this state in a change event listener with onChange prop ->6\n     */\n    React.createElement(\"div\", {\n      className: wrapperClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"author\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, \"Author\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      className: \"form-control\",\n      disabled: loading,\n      value: props.value,\n      onChange: props.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, authorOptions.map(item =>\n    /*#__PURE__*/\n\n    /** render the relevant option element */\n    React.createElement(\"option\", {\n      key: item.value,\n      value: item.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, item.label)))), props.error.authorId && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, props.error.authorId))\n  );\n} // declare default PropTypes\n\n\nAuthorDropDown.defaultProps = {\n  // if no error passed in, default to empty string\n  error: \"\"\n};\nexport default AuthorDropDown;","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/AuthorDropDown.js"],"names":["React","useState","useEffect","getAuthors","AuthorDropDown","props","authorOptions","setAuthorOptions","value","label","loading","setLoading","setValue","wrapperClass","error","length","unmounted","then","_authorOptions","map","id","name","onChange","item","authorId","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,CACjD;AAAEO,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,KAAK,EAAE;AAApB,GADiD,CAAD,CAAlD,CAF6B,CAM7B;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC,CAP6B,CAS7B;;AACA,QAAM,CAACO,KAAD,EAAQI,QAAR,IAAoBX,QAAQ,CAAC,eAAD,CAAlC;AAEA,MAAIY,YAAY,GAAG,YAAnB,CAZ6B,CAa7B;;AACA,MAAIR,KAAK,CAACS,KAAN,CAAYC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,YAAY,IAAI,YAAhB;AACA;;;;AAID;;AAEDX,EAAAA,SAAS,CACP;AACE;;AAEA;AACE;AACA,QAAIc,SAAS,GAAG,KAAhB,CAFF,CAIE;;AACA,QAAI,CAACA,SAAL,EAAgB;AACdb,MAAAA,UAAU,GAAGc,IAAb,CAAmBC,cAAD,IAChBX,gBAAgB,CACdW,cAAc,CAACC,GAAf,CAAmB,CAAC;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,OAAD,MAAmB;AAAEb,QAAAA,KAAK,EAAEY,EAAT;AAAaX,QAAAA,KAAK,EAAEY;AAApB,OAAnB,CAAnB,CADc,CADlB,EADc,CAOd;;AACAV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAdH,CAgBE;;;AACA,WAAO,MAAM;AACXK,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GAxBI;AAyBP;;;AAGA,IA5BO,CAAT;AA8BA,WApD6B,CAqD7B;;AACA;AAAA;;AACE;;;;AAIA;AAAK,MAAA,SAAS,EAAEH,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,QAAQ,EAAEH,OAFZ;AAGE,MAAA,KAAK,EAAEL,KAAK,CAACG,KAHf;AAIE,MAAA,QAAQ,EAAEH,KAAK,CAACiB,QAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGhB,aAAa,CAACa,GAAd,CAAmBI,IAAD;AAAA;;AACjB;AAEA;AAAQ,MAAA,GAAG,EAAEA,IAAI,CAACf,KAAlB;AAAyB,MAAA,KAAK,EAAEe,IAAI,CAACf,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGe,IAAI,CAACd,KADR,CAHD,CAPH,CADF,CAFF,EAoBGJ,KAAK,CAACS,KAAN,CAAYU,QAAZ,iBACC;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCnB,KAAK,CAACS,KAAN,CAAYU,QAAjD,CArBJ;AALF;AA8BD,C,CAED;;;AACApB,cAAc,CAACqB,YAAf,GAA8B;AAC5B;AACAX,EAAAA,KAAK,EAAE;AAFqB,CAA9B;AAKA,eAAeV,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getAuthors } from \"../api/authorApi\";\n\nfunction AuthorDropDown(props) {\n  // 1. Set initial value of state and return current value\n  const [authorOptions, setAuthorOptions] = useState([\n    { value: \"\", label: \"Loading...\" },\n  ]);\n\n  // 4. Stop use from interacting with dropdown while loading\n  const [loading, setLoading] = useState(true);\n\n  // 6. Control dropdown value selected in state and set initial value -> ManageCoursePage change handler\n  const [value, setValue] = useState(\"Select author\");\n\n  let wrapperClass = \"form-group\";\n  // Dynamically add a Bootstrap class name\n  if (props.error.length > 0) {\n    wrapperClass += \" has-error\";\n    /** Bootstrapper has-error class will add a\n     *  red line around the input when it is in\n     *  an error state.\n     */\n  }\n\n  useEffect(\n    () =>\n      /** first parameter is a function to execute when\n       *  the side effect runs */\n      {\n        // 5. Set unmounted flag to set state only if use is still on the page\n        let unmounted = false;\n\n        // 3. Fetch data from a API if use is still mounted\n        if (!unmounted) {\n          getAuthors().then((_authorOptions) =>\n            setAuthorOptions(\n              _authorOptions.map(({ id, name }) => ({ value: id, label: name }))\n            )\n          );\n\n          // 4. Enable dropdown after loading\n          setLoading(false);\n        }\n\n        // on unmount -> 5\n        return () => {\n          unmounted = true;\n        };\n      },\n    /** second parameter determines when the side effect runs.\n     *  In our case this is just after the component first\n     *  renders because we have specified an empty array */\n    []\n  );\n  debugger;\n  // 2. Map current value of state to select dropdown options\n  return (\n    /** diabable while loading -> 4\n     *  bind value in state to value prop on select element -> 6\n     *  update this state in a change event listener with onChange prop ->6\n     */\n    <div className={wrapperClass}>\n      <label htmlFor=\"author\">Author</label>\n      <div className=\"field\">\n        <select\n          className=\"form-control\"\n          disabled={loading}\n          value={props.value}\n          onChange={props.onChange}\n        >\n          {/** iterate current value and label props in state*/}\n          {authorOptions.map((item) => (\n            /** render the relevant option element */\n\n            <option key={item.value} value={item.value}>\n              {item.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      {/** Display validation error below input */}\n      {props.error.authorId && (\n        <div className=\"alert alert-danger\">{props.error.authorId}</div>\n      )}\n    </div>\n  );\n}\n\n// declare default PropTypes\nAuthorDropDown.defaultProps = {\n  // if no error passed in, default to empty string\n  error: \"\",\n};\n\nexport default AuthorDropDown;\n"]},"metadata":{},"sourceType":"module"}