{"ast":null,"code":"/**\n *  APIs to GET, SAVE, DELETE Courses\n */\nimport { handleResponse, handleError } from \"./apiUtils\"; // set environment variable in package.json using cross-env\n\nconst baseUrl = process.env.REACT_APP_API_URL + \"/courses/\";\nexport function getCourses() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\nexport function getCourseBySlug(slug) {\n  return fetch(baseUrl + \"?slug=\" + slug).then(response => {\n    if (!response.ok) throw new Error(\"Network response was not ok.\");\n    return response.json().then(courses => {\n      if (courses.length !== 1) throw new Error(\"Course not found: \" + slug).then(this.props.history.push(\"/404-Page-Not-Found\"));\n      return courses[0]; // should only find one course for a given slug, so return it.\n    });\n  }).catch(handleError);\n}\nexport function saveCourse(course) {\n  return fetch(baseUrl + (course.id || \"\"), {\n    method: course.id ? \"PUT\" : \"POST\",\n    // POST for create, PUT to update when id already exists.\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({ ...course,\n      // Parse authorId to a number (in case it was sent as a string).\n      authorId: parseInt(course.authorId, 10)\n    })\n  }).then(handleResponse).catch(handleError);\n}\nexport function deleteCourse(courseId) {\n  return fetch(baseUrl + courseId, {\n    method: \"DELETE\"\n  }).then(handleResponse).catch(handleError);\n}","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/api/courseApi.js"],"names":["handleResponse","handleError","baseUrl","process","env","REACT_APP_API_URL","getCourses","fetch","then","catch","getCourseBySlug","slug","response","ok","Error","json","courses","length","props","history","push","saveCourse","course","id","method","headers","body","JSON","stringify","authorId","parseInt","deleteCourse","courseId"],"mappings":"AAAA;;;AAIA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,YAA5C,C,CAEA;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,WAAhD;AAEA,OAAO,SAASC,UAAT,GAAsB;AAC3B,SAAOC,KAAK,CAACL,OAAD,CAAL,CAAeM,IAAf,CAAoBR,cAApB,EAAoCS,KAApC,CAA0CR,WAA1C,CAAP;AACD;AAED,OAAO,SAASS,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,SAAOJ,KAAK,CAACL,OAAO,GAAG,QAAV,GAAqBS,IAAtB,CAAL,CACJH,IADI,CACEI,QAAD,IAAc;AAClB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AAClB,WAAOF,QAAQ,CAACG,IAAT,GAAgBP,IAAhB,CAAsBQ,OAAD,IAAa;AACvC,UAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EACE,MAAM,IAAIH,KAAJ,CAAU,uBAAuBH,IAAjC,EAAuCH,IAAvC,CACJ,KAAKU,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,qBAAxB,CADI,CAAN;AAGF,aAAOJ,OAAO,CAAC,CAAD,CAAd,CALuC,CAKpB;AACpB,KANM,CAAP;AAOD,GAVI,EAWJP,KAXI,CAWER,WAXF,CAAP;AAYD;AAED,OAAO,SAASoB,UAAT,CAAoBC,MAApB,EAA4B;AACjC,SAAOf,KAAK,CAACL,OAAO,IAAIoB,MAAM,CAACC,EAAP,IAAa,EAAjB,CAAR,EAA8B;AACxCC,IAAAA,MAAM,EAAEF,MAAM,CAACC,EAAP,GAAY,KAAZ,GAAoB,MADY;AACJ;AACpCE,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAF+B;AAGxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,EACnB,GAAGN,MADgB;AAEnB;AACAO,MAAAA,QAAQ,EAAEC,QAAQ,CAACR,MAAM,CAACO,QAAR,EAAkB,EAAlB;AAHC,KAAf;AAHkC,GAA9B,CAAL,CASJrB,IATI,CASCR,cATD,EAUJS,KAVI,CAUER,WAVF,CAAP;AAWD;AAED,OAAO,SAAS8B,YAAT,CAAsBC,QAAtB,EAAgC;AACrC,SAAOzB,KAAK,CAACL,OAAO,GAAG8B,QAAX,EAAqB;AAAER,IAAAA,MAAM,EAAE;AAAV,GAArB,CAAL,CACJhB,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP;AAGD","sourcesContent":["/**\n *  APIs to GET, SAVE, DELETE Courses\n */\n\nimport { handleResponse, handleError } from \"./apiUtils\";\n\n// set environment variable in package.json using cross-env\nconst baseUrl = process.env.REACT_APP_API_URL + \"/courses/\";\n\nexport function getCourses() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\n\nexport function getCourseBySlug(slug) {\n  return fetch(baseUrl + \"?slug=\" + slug)\n    .then((response) => {\n      if (!response.ok) throw new Error(\"Network response was not ok.\");\n      return response.json().then((courses) => {\n        if (courses.length !== 1)\n          throw new Error(\"Course not found: \" + slug).then(\n            this.props.history.push(\"/404-Page-Not-Found\")\n          );\n        return courses[0]; // should only find one course for a given slug, so return it.\n      });\n    })\n    .catch(handleError);\n}\n\nexport function saveCourse(course) {\n  return fetch(baseUrl + (course.id || \"\"), {\n    method: course.id ? \"PUT\" : \"POST\", // POST for create, PUT to update when id already exists.\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({\n      ...course,\n      // Parse authorId to a number (in case it was sent as a string).\n      authorId: parseInt(course.authorId, 10),\n    }),\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function deleteCourse(courseId) {\n  return fetch(baseUrl + courseId, { method: \"DELETE\" })\n    .then(handleResponse)\n    .catch(handleError);\n}\n"]},"metadata":{},"sourceType":"module"}