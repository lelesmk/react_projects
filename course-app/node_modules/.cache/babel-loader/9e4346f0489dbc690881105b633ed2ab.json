{"ast":null,"code":"/** Reuseable code for form inputs */import React from\"react\";/** define PropTypes whenever a reusable component is created\n *  so other devs understand what data to pass down and to\n *  get warnings if we forget to pass the expected data down.\n */function TextInput(props){/** Bootstrap requires a has-error class on the\n   *  form group wrapper if the input has an error.\n   *\n   *  - start with default value \"form-group\"\n   *  - if props.error is set && the error isn't an\n   *    empty string\n   *      then concatenate another class to wrapperClass\n   */var wrapperClass=\"form-group\";// Dynamically add a Bootstrap class name\nif(props.error.length>0){wrapperClass+=\" has-error\";/** Bootstrapper has-error class will add a\n     *  red line around the input when it is in\n     *  an error state.\n     */}return/*#__PURE__*/React.createElement(\"div\",{className:wrapperClass},/*#__PURE__*/React.createElement(\"label\",{htmlFor:props.id},props.label),/*#__PURE__*/React.createElement(\"div\",{className:\"field\"},/*#__PURE__*/React.createElement(\"input\",{id:props.id,type:\"text\",onChange:props.onChange,name:props.name,className:\"form-control\",value:props.value})),props.error&&/*#__PURE__*/React.createElement(\"div\",{className:\"alert alert-danger\"},props.error));}// declare PropTypes\n// declare default PropTypes\nTextInput.defaultProps={// if no error passed in, default to empty string\nerror:\"\"};export default TextInput;","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/course-app/src/common/TextInput.js"],"names":["React","TextInput","props","wrapperClass","error","length","id","label","onChange","name","value","defaultProps"],"mappings":"AAAA,qCAEA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA;;;GAMA,QAASC,CAAAA,SAAT,CAAmBC,KAAnB,CAA0B,CACxB;;;;;;;KAQA,GAAIC,CAAAA,YAAY,CAAG,YAAnB,CACA;AACA,GAAID,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAqB,CAAzB,CAA4B,CAC1BF,YAAY,EAAI,YAAhB,CACA;;;OAID,CACD,mBACE,2BAAK,SAAS,CAAEA,YAAhB,eACE,6BAAO,OAAO,CAAED,KAAK,CAACI,EAAtB,EAA2BJ,KAAK,CAACK,KAAjC,CADF,cAEE,2BAAK,SAAS,CAAC,OAAf,eACE,6BACE,EAAE,CAAEL,KAAK,CAACI,EADZ,CAEE,IAAI,CAAC,MAFP,CAGE,QAAQ,CAAEJ,KAAK,CAACM,QAHlB,CAIE,IAAI,CAAEN,KAAK,CAACO,IAJd,CAKE,SAAS,CAAC,cALZ,CAME,KAAK,CAAEP,KAAK,CAACQ,KANf,EADF,CAFF,CAaGR,KAAK,CAACE,KAAN,eAAe,2BAAK,SAAS,CAAC,oBAAf,EAAqCF,KAAK,CAACE,KAA3C,CAblB,CADF,CAiBD,CAED;AASA;AACAH,SAAS,CAACU,YAAV,CAAyB,CACvB;AACAP,KAAK,CAAE,EAFgB,CAAzB,CAKA,cAAeH,CAAAA,SAAf","sourcesContent":["/** Reuseable code for form inputs */\n\nimport React from \"react\";\n\n/** define PropTypes whenever a reusable component is created\n *  so other devs understand what data to pass down and to\n *  get warnings if we forget to pass the expected data down.\n */\nimport PropTypes from \"prop-types\";\n\nfunction TextInput(props) {\n  /** Bootstrap requires a has-error class on the\n   *  form group wrapper if the input has an error.\n   *\n   *  - start with default value \"form-group\"\n   *  - if props.error is set && the error isn't an\n   *    empty string\n   *      then concatenate another class to wrapperClass\n   */\n  let wrapperClass = \"form-group\";\n  // Dynamically add a Bootstrap class name\n  if (props.error.length > 0) {\n    wrapperClass += \" has-error\";\n    /** Bootstrapper has-error class will add a\n     *  red line around the input when it is in\n     *  an error state.\n     */\n  }\n  return (\n    <div className={wrapperClass}>\n      <label htmlFor={props.id}>{props.label}</label>\n      <div className=\"field\">\n        <input\n          id={props.id}\n          type=\"text\"\n          onChange={props.onChange}\n          name={props.name}\n          className=\"form-control\"\n          value={props.value}\n        />\n      </div>\n      {/** Display validation error below input */}\n      {props.error && <div className=\"alert alert-danger\">{props.error}</div>}\n    </div>\n  );\n}\n\n// declare PropTypes\nTextInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  error: PropTypes.string,\n};\n// declare default PropTypes\nTextInput.defaultProps = {\n  // if no error passed in, default to empty string\n  error: \"\",\n};\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}