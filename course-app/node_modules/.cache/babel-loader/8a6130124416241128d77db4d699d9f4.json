{"ast":null,"code":"var _jsxFileName = \"/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/CoursesPage.js\";\nimport React, { useState, useEffect } from \"react\"; // import function to call from mock api\n\nimport { getCourses } from \"../api/courseApi\"; // import logic\n\nimport CourseList from \"../components/CourseList\"; // FUNCTION COMPONENT WITH HOOKS\n\n/**======================================= */\n\nfunction CoursesPage() {\n  // declare state with useState hook\n\n  /** - useState hook returns an array with two values\n   *   [ nameOfSate, nameOfSetterMethod ]\n   *  - set useState with a default value - an empty array\n   */\n  const [courses, setCourses] = useState([]); // call useEffect to make API call to get courses\n\n  useEffect(() => {\n    getCourses().then(_courses => setCourses(_courses));\n    /** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"Courses\"), /*#__PURE__*/React.createElement(CourseList, {\n    courses: courses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }));\n} // CLASS COMPONENT WITH LIFECYCLE METHODS\n\n/**======================================= */\n// class CoursesPage extends React.Component {\n//   // store list of courses in state\n//   // store state by constructor\n//   //   constructor(props) {\n//   //     super(props);\n//   //     // declare state as an object\n//   //     this.state = {\n//   //       courses: [],\n//   //     };\n//   //   }\n//   // OR simply declare state without constructor\n//   state = {\n//     courses: [],\n//   };\n//   // call lifecycle method for making API calls\n//   componentDidMount() {\n//     // the component must be mounted before calling setSate()\n//     // /**\n//     //  *  - returns a promise based api - a future value\n//     //  *  - .then() handles the future response value */\n//     // getCourses().then(\n//     //   //   /**\n//     //   //    *  - function call will be resolved when the\n//     //   //    *    api call is completed.\n//     //   //    *  - the anonymous function(courses) receives an\n//     //   //    *    array of courses returned by getCourses() api call */\n//     //   function (courses) {\n//     //     //     /**\n//     //     //      *  - now we have a reference to the list of courses\n//     //     //      *    and ready to set state.\n//     //     //      *  - setSate accepts an object that describes the new\n//     //     //      *    new properties that we'd like to set in state.\n//     //     //      *  - set courses object with the courses list properties\n//     //     //      *    we've just received.*/\n//     //     this.setState({ courses: courses });\n//     //   }\n//     // );\n//     // more concise Arrow Function syntax\n//     getCourses().then((courses) => this.setState({ courses: courses }));\n//     /** what this says is:\n//      *  - getCourses from the api\n//      *  - when the api call completes, then\n//      *  - store the array of courses in state */\n//   }\n//   // display state in table\n//   render() {\n//     return (\n//       <>\n//         <h2>Courses</h2>\n//         <table className=\"table\">\n//           <thead>\n//             <tr>\n//               <th>Title</th>\n//               <th>Author ID</th>\n//               <th>Category</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {/** - iterate this state.courses and\n//              *   - call map on that array of courses.\n//              *   - map returns an array. */}\n//             {this.state.courses.map((course) => {\n//               return (\n//                 /** - for each course return a table row array.\n//                  *  - assign a unique key to child in array so\n//                  *  React can track each element when we create\n//                  *  multiple instances of an element in the array\n//                  *  using React components. Now when we add or remove\n//                  *  different elements (row is an element) React\n//                  *  can maintain proper state so the order of\n//                  *  these element doesn't get destroyed when we\n//                  *  re-render the application.\n//                  */\n//                 <tr key={course.id}>\n//                   <td>{course.title}</td>\n//                   <td>{course.authorId}</td>\n//                   <td>{course.category}</td>\n//                 </tr>\n//               );\n//             })}\n//           </tbody>\n//         </table>\n//       </>\n//     );\n//   }\n// }\n\n\nexport default CoursesPage;","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/CoursesPage.js"],"names":["React","useState","useEffect","getCourses","CourseList","CoursesPage","courses","setCourses","then","_courses"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,0BAAvB,C,CAEA;;AACA;;AAEA,SAASC,WAAT,GAAuB;AACrB;;AACA;;;;AAIA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC,CANqB,CAQrB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,UAAU,GAAGK,IAAb,CAAmBC,QAAD,IAAcF,UAAU,CAACE,QAAD,CAA1C;AACA;;;;AAID,GANQ,EAMN,EANM,CAAT;AAQA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAME,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEH,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,C,CAED;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeD,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n// import function to call from mock api\nimport { getCourses } from \"../api/courseApi\";\n\n// import logic\nimport CourseList from \"../components/CourseList\";\n\n// FUNCTION COMPONENT WITH HOOKS\n/**======================================= */\n\nfunction CoursesPage() {\n  // declare state with useState hook\n  /** - useState hook returns an array with two values\n   *   [ nameOfSate, nameOfSetterMethod ]\n   *  - set useState with a default value - an empty array\n   */\n  const [courses, setCourses] = useState([]);\n\n  // call useEffect to make API call to get courses\n  useEffect(() => {\n    getCourses().then((_courses) => setCourses(_courses));\n    /** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */\n  }, []);\n\n  return (\n    <>\n      <h2>Courses</h2>\n      {/** - call child component\n       *   - use props to pass courses array\n       *     from parent to child\n       */}\n      <CourseList courses={courses} />\n    </>\n  );\n}\n\n// CLASS COMPONENT WITH LIFECYCLE METHODS\n/**======================================= */\n// class CoursesPage extends React.Component {\n//   // store list of courses in state\n//   // store state by constructor\n//   //   constructor(props) {\n//   //     super(props);\n\n//   //     // declare state as an object\n//   //     this.state = {\n//   //       courses: [],\n//   //     };\n//   //   }\n\n//   // OR simply declare state without constructor\n//   state = {\n//     courses: [],\n//   };\n\n//   // call lifecycle method for making API calls\n//   componentDidMount() {\n//     // the component must be mounted before calling setSate()\n\n//     // /**\n//     //  *  - returns a promise based api - a future value\n//     //  *  - .then() handles the future response value */\n//     // getCourses().then(\n//     //   //   /**\n//     //   //    *  - function call will be resolved when the\n//     //   //    *    api call is completed.\n//     //   //    *  - the anonymous function(courses) receives an\n//     //   //    *    array of courses returned by getCourses() api call */\n//     //   function (courses) {\n//     //     //     /**\n//     //     //      *  - now we have a reference to the list of courses\n//     //     //      *    and ready to set state.\n//     //     //      *  - setSate accepts an object that describes the new\n//     //     //      *    new properties that we'd like to set in state.\n//     //     //      *  - set courses object with the courses list properties\n//     //     //      *    we've just received.*/\n//     //     this.setState({ courses: courses });\n//     //   }\n//     // );\n//     // more concise Arrow Function syntax\n//     getCourses().then((courses) => this.setState({ courses: courses }));\n//     /** what this says is:\n//      *  - getCourses from the api\n//      *  - when the api call completes, then\n//      *  - store the array of courses in state */\n//   }\n\n//   // display state in table\n//   render() {\n//     return (\n//       <>\n//         <h2>Courses</h2>\n//         <table className=\"table\">\n//           <thead>\n//             <tr>\n//               <th>Title</th>\n//               <th>Author ID</th>\n//               <th>Category</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {/** - iterate this state.courses and\n//              *   - call map on that array of courses.\n//              *   - map returns an array. */}\n//             {this.state.courses.map((course) => {\n//               return (\n//                 /** - for each course return a table row array.\n//                  *  - assign a unique key to child in array so\n//                  *  React can track each element when we create\n//                  *  multiple instances of an element in the array\n//                  *  using React components. Now when we add or remove\n//                  *  different elements (row is an element) React\n//                  *  can maintain proper state so the order of\n//                  *  these element doesn't get destroyed when we\n//                  *  re-render the application.\n//                  */\n//                 <tr key={course.id}>\n//                   <td>{course.title}</td>\n//                   <td>{course.authorId}</td>\n//                   <td>{course.category}</td>\n//                 </tr>\n//               );\n//             })}\n//           </tbody>\n//         </table>\n//       </>\n//     );\n//   }\n// }\n\nexport default CoursesPage;\n"]},"metadata":{},"sourceType":"module"}