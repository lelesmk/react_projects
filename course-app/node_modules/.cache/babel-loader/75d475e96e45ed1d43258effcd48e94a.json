{"ast":null,"code":"import _slicedToArray from\"/Users/LelethuMkefa/dev/js-course/react-flux-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";// import function to call from mock api\nimport courseStore from\"../stores/courseStore\";import authorStore from\"../stores/authorStore\";import{loadCourses,deleteCourse}from\"../actions/courseActions\";// import logic into our page markup\nimport CourseList from\"../components/CourseList\";import{Link}from\"react-router-dom\";import{loadAuthors}from\"../actions/authorActions\";// FUNCTION COMPONENT WITH HOOKS\n/**======================================= */function CoursesPage(){// declare state with useState hook\n/** - useState hook returns an array with two values\n   *   [ nameOfSate, nameOfSetterMethod ]\n   *  - initialise state with the courses held in CourseStore\n   */var _useState=useState(courseStore.getCourses()),_useState2=_slicedToArray(_useState,2),courses=_useState2[0],setCourses=_useState2[1];var _useState3=useState(authorStore.getAuthors()),_useState4=_slicedToArray(_useState3,2),authors=_useState4[0],setAuthors=_useState4[1];// call useEffect to make call to store to get courses\nuseEffect(function(){//===== useEffect body is code to run when the component mounts =====//\n// on MOUNTING: subsctibe to Flux store to listen for changes\n/** addChangeListener accepts a function to call\n     *  when the store changes.\n     *  Remember to clean component when adding a change listener\n     *  on MOUNT by calling removeChangeListener when component\n     *  UNMOUNTS.\n     */courseStore.addChangeListener(onCourseChange);// load courses if this request is made for the first time\n/**\n     *  - check if courseStore has any courses loaded from api\n     *  - if no courses, then call loadCourses from imported courseActions\n     */if(courseStore.getCourses().length===0){loadCourses();}//===== useEffect return is code to run on umount =====//\n// on UNMOUNTING (navigating to a different page) return this function\n/** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */return function(){return courseStore.removeChangeListener(onCourseChange);};// clean up on unmount (navigate to a different page)\n//===== useEffect [] dependency array is code to run everytime a re-render occurs =====//\n/** when dependency array is empty, we're specifying the body to run once */},[]);useEffect(function(){authorStore.addChangeListener(onAuthorChange);// load authors state with array of authors\nif(authorStore.getAuthors().length===0){loadAuthors();}return function(){return authorStore.removeChangeListener(onAuthorChange);};},[]);function getAuthorName(courseAuthorId,authorsArray){console.log(\"searchAuthor() runs...\");for(var i=0;i<authorsArray.length;i++){console.log(\"authorsArray[i].name: \"+authorsArray[courseAuthorId].name);return authorsArray[courseAuthorId].name;}}return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h2\",null,\"Courses\"),/*#__PURE__*/React.createElement(Link,{to:\"/course\",className:\"btn btn-primary\"},\"Add Course\"),/*#__PURE__*/React.createElement(CourseList,{courses:courses,deleteCourse:deleteCourse,authors:authors,getAuthorName:getAuthorName}));// execute function when a course is added to the store\nfunction onCourseChange(){// request courses from store and add/set to this component state\nsetCourses(courseStore.getCourses());/** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */}function onAuthorChange(){setAuthors(authorStore.getAuthors());}// SUMMARY OF STATE OF CONCERNS\n/**\n   *  This separates Smart component (CoursesPage) from\n   *  the Dumb component (CourseList).\n   *  Our controller view / smart component\n   *    1. Requests courses from the store\n   *    2. Sets the state 'courses'\n   *    3. Passes that state (course array) to child\n   *       CourseList for rendering\n   *  The CourseList does nothing but define the markup\n   *  and receives an array of courses via props.\n   *\n   */}// CLASS COMPONENT WITH LIFECYCLE METHODS\n/**======================================= */ // class CoursesPage extends React.Component {\n//   // store list of courses in state\n//   // store state by constructor\n//   //   constructor(props) {\n//   //     super(props);\n//   //     // declare state as an object\n//   //     this.state = {\n//   //       courses: [],\n//   //     };\n//   //   }\n//   // OR simply declare state without constructor\n//   state = {\n//     courses: [],\n//   };\n//   // call lifecycle method for making API calls\n//   componentDidMount() {\n//     // the component must be mounted before calling setSate()\n//     // /**\n//     //  *  - returns a promise based api - a future value\n//     //  *  - .then() handles the future response value */\n//     // getCourses().then(\n//     //   //   /**\n//     //   //    *  - function call will be resolved when the\n//     //   //    *    api call is completed.\n//     //   //    *  - the anonymous function(courses) receives an\n//     //   //    *    array of courses returned by getCourses() api call */\n//     //   function (courses) {\n//     //     //     /**\n//     //     //      *  - now we have a reference to the list of courses\n//     //     //      *    and ready to set state.\n//     //     //      *  - setSate accepts an object that describes the new\n//     //     //      *    new properties that we'd like to set in state.\n//     //     //      *  - set courses object with the courses list properties\n//     //     //      *    we've just received.*/\n//     //     this.setState({ courses: courses });\n//     //   }\n//     // );\n//     // more concise Arrow Function syntax\n//     getCourses().then((courses) => this.setState({ courses: courses }));\n//     /** what this says is:\n//      *  - getCourses from the api\n//      *  - when the api call completes, then\n//      *  - store the array of courses in state */\n//   }\n//   // display state in table\n//   render() {\n//     return (\n//       <>\n//         <h2>Courses</h2>\n//         <table className=\"table\">\n//           <thead>\n//             <tr>\n//               <th>Title</th>\n//               <th>Author ID</th>\n//               <th>Category</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {/** - iterate this state.courses and\n//              *   - call map on that array of courses.\n//              *   - map returns an array. */}\n//             {this.state.courses.map((course) => {\n//               return (\n//                 /** - for each course return a table row array.\n//                  *  - assign a unique key to child in array so\n//                  *  React can track each element when we create\n//                  *  multiple instances of an element in the array\n//                  *  using React components. Now when we add or remove\n//                  *  different elements (row is an element) React\n//                  *  can maintain proper state so the order of\n//                  *  these element doesn't get destroyed when we\n//                  *  re-render the application.\n//                  */\n//                 <tr key={course.id}>\n//                   <td>{course.title}</td>\n//                   <td>{course.authorId}</td>\n//                   <td>{course.category}</td>\n//                 </tr>\n//               );\n//             })}\n//           </tbody>\n//         </table>\n//       </>\n//     );\n//   }\n// }\nexport default CoursesPage;","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/CoursesPage.js"],"names":["React","useState","useEffect","courseStore","authorStore","loadCourses","deleteCourse","CourseList","Link","loadAuthors","CoursesPage","getCourses","courses","setCourses","getAuthors","authors","setAuthors","addChangeListener","onCourseChange","length","removeChangeListener","onAuthorChange","getAuthorName","courseAuthorId","authorsArray","console","log","i","name"],"mappings":"uKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA;AACA,MAAOC,CAAAA,WAAP,KAAwB,uBAAxB,CACA,MAAOC,CAAAA,WAAP,KAAwB,uBAAxB,CAEA,OAASC,WAAT,CAAsBC,YAAtB,KAA0C,0BAA1C,CAEA;AACA,MAAOC,CAAAA,UAAP,KAAuB,0BAAvB,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,WAAT,KAA4B,0BAA5B,CAEA;AACA,6CAEA,QAASC,CAAAA,WAAT,EAAuB,CACrB;AACA;;;KAFqB,cAMST,QAAQ,CAACE,WAAW,CAACQ,UAAZ,EAAD,CANjB,wCAMdC,OANc,eAMLC,UANK,8BAOSZ,QAAQ,CAACG,WAAW,CAACU,UAAZ,EAAD,CAPjB,yCAOdC,OAPc,eAOLC,UAPK,eASrB;AACAd,SAAS,CAAC,UAAM,CACd;AAEA;AACA;;;;;OAMAC,WAAW,CAACc,iBAAZ,CAA8BC,cAA9B,EAEA;AACA;;;OAIA,GAAIf,WAAW,CAACQ,UAAZ,GAAyBQ,MAAzB,GAAoC,CAAxC,CAA2C,CACzCd,WAAW,GACZ,CAED;AAEA;AACA;;OAGA,MAAO,kBAAMF,CAAAA,WAAW,CAACiB,oBAAZ,CAAiCF,cAAjC,CAAN,EAAP,CAA+D;AAE/D;AACA,4EACD,CA/BQ,CA+BN,EA/BM,CAAT,CAiCAhB,SAAS,CAAC,UAAM,CACdE,WAAW,CAACa,iBAAZ,CAA8BI,cAA9B,EAEA;AACA,GAAIjB,WAAW,CAACU,UAAZ,GAAyBK,MAAzB,GAAoC,CAAxC,CAA2C,CACzCV,WAAW,GACZ,CAED,MAAO,kBAAML,CAAAA,WAAW,CAACgB,oBAAZ,CAAiCC,cAAjC,CAAN,EAAP,CACD,CATQ,CASN,EATM,CAAT,CAWA,QAASC,CAAAA,aAAT,CAAuBC,cAAvB,CAAuCC,YAAvC,CAAqD,CACnDC,OAAO,CAACC,GAAR,CAAY,wBAAZ,EACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,YAAY,CAACL,MAAjC,CAAyCQ,CAAC,EAA1C,CAA8C,CAC5CF,OAAO,CAACC,GAAR,CAAY,yBAA2BF,YAAY,CAACD,cAAD,CAAZ,CAA6BK,IAApE,EACA,MAAOJ,CAAAA,YAAY,CAACD,cAAD,CAAZ,CAA6BK,IAApC,CACD,CACF,CAED,mBACE,qDACE,wCADF,cAGE,oBAAC,IAAD,EAAM,EAAE,CAAC,SAAT,CAAmB,SAAS,CAAC,iBAA7B,eAHF,cAWE,oBAAC,UAAD,EACE,OAAO,CAAEhB,OADX,CAEE,YAAY,CAAEN,YAFhB,CAGE,OAAO,CAAES,OAHX,CAIE,aAAa,CAAEO,aAJjB,EAXF,CADF,CAqBA;AACA,QAASJ,CAAAA,cAAT,EAA0B,CACxB;AACAL,UAAU,CAACV,WAAW,CAACQ,UAAZ,EAAD,CAAV,CAEA;;;gDAID,CAED,QAASU,CAAAA,cAAT,EAA0B,CACxBL,UAAU,CAACZ,WAAW,CAACU,UAAZ,EAAD,CAAV,CACD,CACD;AACA;;;;;;;;;;;KAYD,CAED;AACA,6C,CACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,cAAeJ,CAAAA,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n// import function to call from mock api\nimport courseStore from \"../stores/courseStore\";\nimport authorStore from \"../stores/authorStore\";\n\nimport { loadCourses, deleteCourse } from \"../actions/courseActions\";\n\n// import logic into our page markup\nimport CourseList from \"../components/CourseList\";\nimport { Link } from \"react-router-dom\";\nimport { loadAuthors } from \"../actions/authorActions\";\n\n// FUNCTION COMPONENT WITH HOOKS\n/**======================================= */\n\nfunction CoursesPage() {\n  // declare state with useState hook\n  /** - useState hook returns an array with two values\n   *   [ nameOfSate, nameOfSetterMethod ]\n   *  - initialise state with the courses held in CourseStore\n   */\n  const [courses, setCourses] = useState(courseStore.getCourses());\n  const [authors, setAuthors] = useState(authorStore.getAuthors());\n\n  // call useEffect to make call to store to get courses\n  useEffect(() => {\n    //===== useEffect body is code to run when the component mounts =====//\n\n    // on MOUNTING: subsctibe to Flux store to listen for changes\n    /** addChangeListener accepts a function to call\n     *  when the store changes.\n     *  Remember to clean component when adding a change listener\n     *  on MOUNT by calling removeChangeListener when component\n     *  UNMOUNTS.\n     */\n    courseStore.addChangeListener(onCourseChange);\n\n    // load courses if this request is made for the first time\n    /**\n     *  - check if courseStore has any courses loaded from api\n     *  - if no courses, then call loadCourses from imported courseActions\n     */\n    if (courseStore.getCourses().length === 0) {\n      loadCourses();\n    }\n\n    //===== useEffect return is code to run on umount =====//\n\n    // on UNMOUNTING (navigating to a different page) return this function\n    /** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */\n    return () => courseStore.removeChangeListener(onCourseChange); // clean up on unmount (navigate to a different page)\n\n    //===== useEffect [] dependency array is code to run everytime a re-render occurs =====//\n    /** when dependency array is empty, we're specifying the body to run once */\n  }, []);\n\n  useEffect(() => {\n    authorStore.addChangeListener(onAuthorChange);\n\n    // load authors state with array of authors\n    if (authorStore.getAuthors().length === 0) {\n      loadAuthors();\n    }\n\n    return () => authorStore.removeChangeListener(onAuthorChange);\n  }, []);\n\n  function getAuthorName(courseAuthorId, authorsArray) {\n    console.log(\"searchAuthor() runs...\");\n    for (let i = 0; i < authorsArray.length; i++) {\n      console.log(\"authorsArray[i].name: \" + authorsArray[courseAuthorId].name);\n      return authorsArray[courseAuthorId].name;\n    }\n  }\n\n  return (\n    <>\n      <h2>Courses</h2>\n      {/** - add course button to ManageCoursePage component */}\n      <Link to=\"/course\" className=\"btn btn-primary\">\n        Add Course\n      </Link>\n      {/** - call child component\n       *   - use props to pass courses array\n       *     from parent to child\n       *  (props are like html attributes for react components)\n       */}\n      <CourseList\n        courses={courses}\n        deleteCourse={deleteCourse}\n        authors={authors}\n        getAuthorName={getAuthorName}\n      />\n    </>\n  );\n\n  // execute function when a course is added to the store\n  function onCourseChange() {\n    // request courses from store and add/set to this component state\n    setCourses(courseStore.getCourses());\n\n    /** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */\n  }\n\n  function onAuthorChange() {\n    setAuthors(authorStore.getAuthors());\n  }\n  // SUMMARY OF STATE OF CONCERNS\n  /**\n   *  This separates Smart component (CoursesPage) from\n   *  the Dumb component (CourseList).\n   *  Our controller view / smart component\n   *    1. Requests courses from the store\n   *    2. Sets the state 'courses'\n   *    3. Passes that state (course array) to child\n   *       CourseList for rendering\n   *  The CourseList does nothing but define the markup\n   *  and receives an array of courses via props.\n   *\n   */\n}\n\n// CLASS COMPONENT WITH LIFECYCLE METHODS\n/**======================================= */\n// class CoursesPage extends React.Component {\n//   // store list of courses in state\n//   // store state by constructor\n//   //   constructor(props) {\n//   //     super(props);\n\n//   //     // declare state as an object\n//   //     this.state = {\n//   //       courses: [],\n//   //     };\n//   //   }\n\n//   // OR simply declare state without constructor\n//   state = {\n//     courses: [],\n//   };\n\n//   // call lifecycle method for making API calls\n//   componentDidMount() {\n//     // the component must be mounted before calling setSate()\n\n//     // /**\n//     //  *  - returns a promise based api - a future value\n//     //  *  - .then() handles the future response value */\n//     // getCourses().then(\n//     //   //   /**\n//     //   //    *  - function call will be resolved when the\n//     //   //    *    api call is completed.\n//     //   //    *  - the anonymous function(courses) receives an\n//     //   //    *    array of courses returned by getCourses() api call */\n//     //   function (courses) {\n//     //     //     /**\n//     //     //      *  - now we have a reference to the list of courses\n//     //     //      *    and ready to set state.\n//     //     //      *  - setSate accepts an object that describes the new\n//     //     //      *    new properties that we'd like to set in state.\n//     //     //      *  - set courses object with the courses list properties\n//     //     //      *    we've just received.*/\n//     //     this.setState({ courses: courses });\n//     //   }\n//     // );\n//     // more concise Arrow Function syntax\n//     getCourses().then((courses) => this.setState({ courses: courses }));\n//     /** what this says is:\n//      *  - getCourses from the api\n//      *  - when the api call completes, then\n//      *  - store the array of courses in state */\n//   }\n\n//   // display state in table\n//   render() {\n//     return (\n//       <>\n//         <h2>Courses</h2>\n//         <table className=\"table\">\n//           <thead>\n//             <tr>\n//               <th>Title</th>\n//               <th>Author ID</th>\n//               <th>Category</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {/** - iterate this state.courses and\n//              *   - call map on that array of courses.\n//              *   - map returns an array. */}\n//             {this.state.courses.map((course) => {\n//               return (\n//                 /** - for each course return a table row array.\n//                  *  - assign a unique key to child in array so\n//                  *  React can track each element when we create\n//                  *  multiple instances of an element in the array\n//                  *  using React components. Now when we add or remove\n//                  *  different elements (row is an element) React\n//                  *  can maintain proper state so the order of\n//                  *  these element doesn't get destroyed when we\n//                  *  re-render the application.\n//                  */\n//                 <tr key={course.id}>\n//                   <td>{course.title}</td>\n//                   <td>{course.authorId}</td>\n//                   <td>{course.category}</td>\n//                 </tr>\n//               );\n//             })}\n//           </tbody>\n//         </table>\n//       </>\n//     );\n//   }\n// }\n\nexport default CoursesPage;\n"]},"metadata":{},"sourceType":"module"}