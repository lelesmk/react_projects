{"ast":null,"code":"import _objectSpread from\"/Users/LelethuMkefa/dev/js-course/course-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/**\n *  APIs to GET, SAVE, DELETE Courses\n */import{handleResponse,handleError}from\"./apiUtils\";// set environment variable in package.json using cross-env\nvar baseUrl=process.env.REACT_APP_API_URL+\"/courses/\";export function getCourses(){return fetch(baseUrl).then(handleResponse).catch(handleError);}export function getCourseBySlug(slug){return fetch(baseUrl+\"?slug=\"+slug).then(function(response){if(!response.ok)throw new Error(\"Network response was not ok.\");return response.json().then(function(courses){if(courses.length!==1)throw new Error(\"Course not found: \"+slug);return courses[0];// should only find one course for a given slug, so return it.\n});}).catch(handleError);}export function saveCourse(course){return fetch(baseUrl+(course.id||\"\"),{method:course.id?\"PUT\":\"POST\",// POST for create, PUT to update when id already exists.\nheaders:{\"content-type\":\"application/json\"},body:JSON.stringify(_objectSpread(_objectSpread({},course),{},{// Parse authorId to a number (in case it was sent as a string).\nauthorId:parseInt(course.authorId,10)}))}).then(handleResponse).catch(handleError);}export function deleteCourse(courseId){return fetch(baseUrl+courseId,{method:\"DELETE\"}).then(handleResponse).catch(handleError);}","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/course-app/src/api/courseApi.js"],"names":["handleResponse","handleError","baseUrl","process","env","REACT_APP_API_URL","getCourses","fetch","then","catch","getCourseBySlug","slug","response","ok","Error","json","courses","length","saveCourse","course","id","method","headers","body","JSON","stringify","authorId","parseInt","deleteCourse","courseId"],"mappings":"8HAAA;;GAIA,OAASA,cAAT,CAAyBC,WAAzB,KAA4C,YAA5C,CAEA;AACA,GAAMC,CAAAA,OAAO,CAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,CAAgC,WAAhD,CAEA,MAAO,SAASC,CAAAA,UAAT,EAAsB,CAC3B,MAAOC,CAAAA,KAAK,CAACL,OAAD,CAAL,CAAeM,IAAf,CAAoBR,cAApB,EAAoCS,KAApC,CAA0CR,WAA1C,CAAP,CACD,CAED,MAAO,SAASS,CAAAA,eAAT,CAAyBC,IAAzB,CAA+B,CACpC,MAAOJ,CAAAA,KAAK,CAACL,OAAO,CAAG,QAAV,CAAqBS,IAAtB,CAAL,CACJH,IADI,CACC,SAACI,QAAD,CAAc,CAClB,GAAI,CAACA,QAAQ,CAACC,EAAd,CAAkB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,8BAAV,CAAN,CAClB,MAAOF,CAAAA,QAAQ,CAACG,IAAT,GAAgBP,IAAhB,CAAqB,SAACQ,OAAD,CAAa,CACvC,GAAIA,OAAO,CAACC,MAAR,GAAmB,CAAvB,CAA0B,KAAM,IAAIH,CAAAA,KAAJ,CAAU,qBAAuBH,IAAjC,CAAN,CAC1B,MAAOK,CAAAA,OAAO,CAAC,CAAD,CAAd,CAAmB;AACpB,CAHM,CAAP,CAID,CAPI,EAQJP,KARI,CAQER,WARF,CAAP,CASD,CAED,MAAO,SAASiB,CAAAA,UAAT,CAAoBC,MAApB,CAA4B,CACjC,MAAOZ,CAAAA,KAAK,CAACL,OAAO,EAAIiB,MAAM,CAACC,EAAP,EAAa,EAAjB,CAAR,CAA8B,CACxCC,MAAM,CAAEF,MAAM,CAACC,EAAP,CAAY,KAAZ,CAAoB,MADY,CACJ;AACpCE,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAF+B,CAGxCC,IAAI,CAAEC,IAAI,CAACC,SAAL,gCACDN,MADC,MAEJ;AACAO,QAAQ,CAAEC,QAAQ,CAACR,MAAM,CAACO,QAAR,CAAkB,EAAlB,CAHd,GAHkC,CAA9B,CAAL,CASJlB,IATI,CASCR,cATD,EAUJS,KAVI,CAUER,WAVF,CAAP,CAWD,CAED,MAAO,SAAS2B,CAAAA,YAAT,CAAsBC,QAAtB,CAAgC,CACrC,MAAOtB,CAAAA,KAAK,CAACL,OAAO,CAAG2B,QAAX,CAAqB,CAAER,MAAM,CAAE,QAAV,CAArB,CAAL,CACJb,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP,CAGD","sourcesContent":["/**\n *  APIs to GET, SAVE, DELETE Courses\n */\n\nimport { handleResponse, handleError } from \"./apiUtils\";\n\n// set environment variable in package.json using cross-env\nconst baseUrl = process.env.REACT_APP_API_URL + \"/courses/\";\n\nexport function getCourses() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\n\nexport function getCourseBySlug(slug) {\n  return fetch(baseUrl + \"?slug=\" + slug)\n    .then((response) => {\n      if (!response.ok) throw new Error(\"Network response was not ok.\");\n      return response.json().then((courses) => {\n        if (courses.length !== 1) throw new Error(\"Course not found: \" + slug);\n        return courses[0]; // should only find one course for a given slug, so return it.\n      });\n    })\n    .catch(handleError);\n}\n\nexport function saveCourse(course) {\n  return fetch(baseUrl + (course.id || \"\"), {\n    method: course.id ? \"PUT\" : \"POST\", // POST for create, PUT to update when id already exists.\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({\n      ...course,\n      // Parse authorId to a number (in case it was sent as a string).\n      authorId: parseInt(course.authorId, 10),\n    }),\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function deleteCourse(courseId) {\n  return fetch(baseUrl + courseId, { method: \"DELETE\" })\n    .then(handleResponse)\n    .catch(handleError);\n}\n"]},"metadata":{},"sourceType":"module"}