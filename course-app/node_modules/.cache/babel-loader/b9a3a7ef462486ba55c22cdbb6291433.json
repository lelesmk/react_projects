{"ast":null,"code":"import _defineProperty from\"/Users/LelethuMkefa/dev/js-course/react-flux-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/LelethuMkefa/dev/js-course/react-flux-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/LelethuMkefa/dev/js-course/react-flux-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable no-restricted-globals */import React,{useState,useEffect}from\"react\";import AuthorForm from\"./AuthorForm\";// import toast notifications\nimport{toast}from\"react-toastify\";// import store to access payloads from the api\nimport authorStore from\"../stores/authorStore\";// import actions to interact with the store and not the api directly\nimport*as authorActions from\"../actions/authorActions\";/** Arrow function component with props received */var ManageAuthorPage=function ManageAuthorPage(props){/**\n   *  - declare client side validation state\n   *  - initialise with empty object */var _useState=useState({}),_useState2=_slicedToArray(_useState,2),errors=_useState2[0],setErrors=_useState2[1];// Connect page to Flux store\n/** store the list of authors from the Flux store in state,\n   *  then connect to the store in on Mount - useEffect()\n   */var _useState3=useState(authorStore.getAuthors()),_useState4=_slicedToArray(_useState3,2),authors=_useState4[0],setAuthors=_useState4[1];/**\n   *  - declare state to hold author form data\n   *  - initialise with an empty author object\n   * */var _useState5=useState({id:null,name:\"\"}),_useState6=_slicedToArray(_useState5,2),author=_useState6[0],setAuthor=_useState6[1];// Edit author\nuseEffect(function(){// connect/subscribe to the flux store\nauthorStore.addChangeListener(onChange);// run onChange() callback when authorStore changes\n// get id from querry parameters\nvar id=props.match.params.id;// pulled from path '/authors/:id' in App.js\n// Find author by id\n/** if the user access this page directly we need to check\n     *  if authors have been loaded into the Flux store.\n     *  if authors have not been load we need to ask the Flux\n     *  store to load them before the use can access a author.\n     */ // on page load check if there's any authors in state yet\nif(authors.length===0){// if no authors in authors array we load them\n/** when this change is completed the\n       *  callback onChange() is executed and\n       *  updated the array of authors.\n       *  since authors.length is listed in the\n       *  dependency array below, useEffect will run again.*/authorActions.loadAuthors();}else if(id){// get author from store and update the author\n/** getAuthorById returns a author with a specified id\n       *  from the flux store. The result is passed to setAuthor().\n       */if(authorStore.authorFound(id)===true){setAuthor(authorStore.getAuthorById(id));// from path '/authors/:id'\n}else{props.history.push(\"/404\");}}// on UNMOUNTING (navigating to a different page) return this function\n/** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */return function(){return authorStore.removeChangeListener(onChange);};// clean addChangeListener new page is rendered\n},[props.history,authors.length,props.match.params.id]);// declare a dependancy array\n/** If anything in the dependency array changes, useEffect will re-run.\n   *  When useEffect runs the second time after authors are loaded\n   *  authors.length will not be 0 and if there's a id in the url\n   *  it will ask the store for the relevant author, and the author\n   *  will be there because the array of authors  has already been\n   *  populated in the Flux store.\n   */ // execute function when a author is added to the store\nfunction onChange(){// request authors from store and add/set to this component state\nsetAuthors(authorStore.getAuthors());/** what this says is:\n     *  - getAuthors from the api\n     *  - when the api call completes, then\n     *  - store the array of authors in state */}// declare change handler for form inputs\nfunction handleChange(event){/**\n     *  - use ...spread operator to copy state for editing\n     *  - set value passed in by form event based on the\n     *    name property of element e.g.\n     *    if attribute name=\"title\",\n     *    then value will be stored in author.title\n     *    and intialised to a variable prop [event.target.name]\n     *    called a Computed Property\n     *    which can be used by each form input.\n     *  - pass updated author to setauthor function*/var updatedAuthor=_objectSpread({},author,_defineProperty({},event.target.name,event.target.value));setAuthor(updatedAuthor);}// form validation function\nfunction formIsValid(){// declare local errors object\nvar _errors={};// initialise errors if author props empty\nif(!author.name)_errors.name=\"Name is required\";// pass validation error result\nsetErrors(_errors);// form is valid if the errors object has no properties\nreturn Object.keys(_errors).length===0;// returns boolean\n/**\n     *  the Object.keys returns an array of an object's keys.\n     *  if the array of keys for the _errors' object is 0 then\n     *  the errors object has no properties.\n     */}// declare submit handler\n// automatically receives an event from browser\nfunction handleSubmit(event){// handle form validation\n/** if the form is not valid then do nothing. */if(!formIsValid())return;// to handle event on client, call prevent default post to server\nevent.preventDefault();// call authorActions (instead of directly calling the api)\nauthorActions// pass the author held in state\n.saveAuthor(author)/** all the api functions return a promise so we could\n       *  declare .then() to specify what should happen after\n       *  the saveAuthor is completed.\n       */.then(function(){// redirect back to AuthorsPage\nprops.history.push(\"/authors\");/** since Add Author was loaded via\n         * React Router's Route we have access to\n         * React Router's history object on props.\n         * So we can programmatically redirect the\n         * user after the save is completed. */ // display notification after success save\ntoast.success(\"Author saved.\");});}return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h2\",null,\"Manage Author\"),/*#__PURE__*/React.createElement(AuthorForm,{author:author,onChange:handleChange,onSubmit:handleSubmit,errors:errors}));};export default ManageAuthorPage;// then create a route in App.js","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/ManageAuthorPage.js"],"names":["React","useState","useEffect","AuthorForm","toast","authorStore","authorActions","ManageAuthorPage","props","errors","setErrors","getAuthors","authors","setAuthors","id","name","author","setAuthor","addChangeListener","onChange","match","params","length","loadAuthors","authorFound","getAuthorById","history","push","removeChangeListener","handleChange","event","updatedAuthor","target","value","formIsValid","_errors","Object","keys","handleSubmit","preventDefault","saveAuthor","then","success"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport React, { useState, useEffect } from \"react\";\nimport AuthorForm from \"./AuthorForm\";\n\n// import toast notifications\nimport { toast } from \"react-toastify\";\n\n// import store to access payloads from the api\nimport authorStore from \"../stores/authorStore\";\n\n// import actions to interact with the store and not the api directly\nimport * as authorActions from \"../actions/authorActions\";\n\n/** Arrow function component with props received */\nconst ManageAuthorPage = (props) => {\n  /**\n   *  - declare client side validation state\n   *  - initialise with empty object */\n  const [errors, setErrors] = useState({});\n\n  // Connect page to Flux store\n  /** store the list of authors from the Flux store in state,\n   *  then connect to the store in on Mount - useEffect()\n   */\n  const [authors, setAuthors] = useState(authorStore.getAuthors());\n\n  /**\n   *  - declare state to hold author form data\n   *  - initialise with an empty author object\n   * */\n  const [author, setAuthor] = useState({\n    id: null,\n    name: \"\",\n  });\n  // Edit author\n  useEffect(() => {\n    // connect/subscribe to the flux store\n    authorStore.addChangeListener(onChange); // run onChange() callback when authorStore changes\n\n    // get id from querry parameters\n    const id = props.match.params.id; // pulled from path '/authors/:id' in App.js\n\n    // Find author by id\n    /** if the user access this page directly we need to check\n     *  if authors have been loaded into the Flux store.\n     *  if authors have not been load we need to ask the Flux\n     *  store to load them before the use can access a author.\n     */\n\n    // on page load check if there's any authors in state yet\n    if (authors.length === 0) {\n      // if no authors in authors array we load them\n      /** when this change is completed the\n       *  callback onChange() is executed and\n       *  updated the array of authors.\n       *  since authors.length is listed in the\n       *  dependency array below, useEffect will run again.*/\n      authorActions.loadAuthors();\n    } else if (id) {\n      // get author from store and update the author\n      /** getAuthorById returns a author with a specified id\n       *  from the flux store. The result is passed to setAuthor().\n       */\n\n      if (authorStore.authorFound(id) === true) {\n        setAuthor(authorStore.getAuthorById(id)); // from path '/authors/:id'\n      } else {\n        props.history.push(\"/404\");\n      }\n    }\n\n    // on UNMOUNTING (navigating to a different page) return this function\n    /** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */\n    return () => authorStore.removeChangeListener(onChange); // clean addChangeListener new page is rendered\n  }, [props.history, authors.length, props.match.params.id]); // declare a dependancy array\n  /** If anything in the dependency array changes, useEffect will re-run.\n   *  When useEffect runs the second time after authors are loaded\n   *  authors.length will not be 0 and if there's a id in the url\n   *  it will ask the store for the relevant author, and the author\n   *  will be there because the array of authors  has already been\n   *  populated in the Flux store.\n   */\n\n  // execute function when a author is added to the store\n  function onChange() {\n    // request authors from store and add/set to this component state\n    setAuthors(authorStore.getAuthors());\n    /** what this says is:\n     *  - getAuthors from the api\n     *  - when the api call completes, then\n     *  - store the array of authors in state */\n  }\n\n  // declare change handler for form inputs\n  function handleChange(event) {\n    /**\n     *  - use ...spread operator to copy state for editing\n     *  - set value passed in by form event based on the\n     *    name property of element e.g.\n     *    if attribute name=\"title\",\n     *    then value will be stored in author.title\n     *    and intialised to a variable prop [event.target.name]\n     *    called a Computed Property\n     *    which can be used by each form input.\n     *  - pass updated author to setauthor function*/\n    const updatedAuthor = {\n      ...author,\n      [event.target.name]: event.target.value,\n    };\n    setAuthor(updatedAuthor);\n  }\n\n  // form validation function\n  function formIsValid() {\n    // declare local errors object\n    const _errors = {};\n\n    // initialise errors if author props empty\n    if (!author.name) _errors.name = \"Name is required\";\n\n    // pass validation error result\n    setErrors(_errors);\n\n    // form is valid if the errors object has no properties\n    return Object.keys(_errors).length === 0; // returns boolean\n    /**\n     *  the Object.keys returns an array of an object's keys.\n     *  if the array of keys for the _errors' object is 0 then\n     *  the errors object has no properties.\n     */\n  }\n\n  // declare submit handler\n  // automatically receives an event from browser\n  function handleSubmit(event) {\n    // handle form validation\n    /** if the form is not valid then do nothing. */\n    if (!formIsValid()) return;\n\n    // to handle event on client, call prevent default post to server\n    event.preventDefault();\n\n    // call authorActions (instead of directly calling the api)\n    authorActions\n      // pass the author held in state\n      .saveAuthor(author)\n      /** all the api functions return a promise so we could\n       *  declare .then() to specify what should happen after\n       *  the saveAuthor is completed.\n       */\n      .then(() => {\n        // redirect back to AuthorsPage\n        props.history.push(\"/authors\");\n        /** since Add Author was loaded via\n         * React Router's Route we have access to\n         * React Router's history object on props.\n         * So we can programmatically redirect the\n         * user after the save is completed. */\n\n        // display notification after success save\n        toast.success(\"Author saved.\");\n      });\n  }\n\n  return (\n    <>\n      <h2>Manage Author</h2>\n      {/** Pass down to AuthorForm child component via props\n       *  - pass down author state object\n       *  - pass down change handler\n       *  - pass down save form handler\n       *  - pass down validation errors */}\n      <AuthorForm\n        author={author}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n        errors={errors}\n      />\n    </>\n  );\n};\n\nexport default ManageAuthorPage;\n\n// then create a route in App.js\n"]},"metadata":{},"sourceType":"module"}