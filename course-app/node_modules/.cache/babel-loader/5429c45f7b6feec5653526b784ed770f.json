{"ast":null,"code":"import _regeneratorRuntime from\"/Users/LelethuMkefa/dev/js-course/course-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/LelethuMkefa/dev/js-course/course-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/**\n *  Centralizes the handling of our API responses.\n */export function handleResponse(_x){return _handleResponse.apply(this,arguments);}// In a real app, would likely call an error logging service.\nfunction _handleResponse(){_handleResponse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(response){var error;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!response.ok){_context.next=2;break;}return _context.abrupt(\"return\",response.json());case 2:if(!(response.status===400)){_context.next=7;break;}_context.next=5;return response.text();case 5:error=_context.sent;throw new Error(error);case 7:throw new Error(\"Network response was not ok.\");case 8:case\"end\":return _context.stop();}}},_callee);}));return _handleResponse.apply(this,arguments);}export function handleError(error){// eslint-disable-next-line no-console\nconsole.error(\"API call failed. \"+error);throw error;}","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/course-app/src/api/apiUtils.js"],"names":["handleResponse","response","ok","json","status","text","error","Error","handleError","console"],"mappings":"2PAAA;;GAIA,eAAsBA,CAAAA,cAAtB,mDAWA;mGAXO,iBAA8BC,QAA9B,gIACDA,QAAQ,CAACC,EADR,yDACmBD,QAAQ,CAACE,IAAT,EADnB,cAEDF,QAAQ,CAACG,MAAT,GAAoB,GAFnB,gDAKiBH,CAAAA,QAAQ,CAACI,IAAT,EALjB,QAKGC,KALH,oBAMG,IAAIC,CAAAA,KAAJ,CAAUD,KAAV,CANH,aAQC,IAAIC,CAAAA,KAAJ,CAAU,8BAAV,CARD,uD,iDAYP,MAAO,SAASC,CAAAA,WAAT,CAAqBF,KAArB,CAA4B,CACjC;AACAG,OAAO,CAACH,KAAR,CAAc,oBAAsBA,KAApC,EACA,KAAMA,CAAAA,KAAN,CACD","sourcesContent":["/**\n *  Centralizes the handling of our API responses.\n */\n\nexport async function handleResponse(response) {\n  if (response.ok) return response.json();\n  if (response.status === 400) {\n    // So, a server-side validation error occurred.\n    // Server side validation returns a string error message, so parse as text instead of json.\n    const error = await response.text();\n    throw new Error(error);\n  }\n  throw new Error(\"Network response was not ok.\");\n}\n\n// In a real app, would likely call an error logging service.\nexport function handleError(error) {\n  // eslint-disable-next-line no-console\n  console.error(\"API call failed. \" + error);\n  throw error;\n}\n"]},"metadata":{},"sourceType":"module"}