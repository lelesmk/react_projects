{"ast":null,"code":"var _jsxFileName = \"/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/ManageCoursePage.js\";\n\n/* eslint-disable no-restricted-globals */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport CourseForm from \"./CourseForm\"; // import toast notifications\n\nimport { toast } from \"react-toastify\"; // import store to access payloads from the api\n\nimport courseStore from \"../stores/courseStore\"; // import actions to interact with the store and not the api directly\n\nimport * as courseActions from \"../actions/courseActions\";\n/** Arrow function component with props received */\n\nconst ManageCoursePage = props => {\n  /**\n   *  - declare client side validation state\n   *  - initialise with empty object */\n  const [errors, setErrors] = useState({}); // Connect page to Flux store\n\n  /** store the list of courses from the Flux store in state,\n   *  then connect to the store in on Mount - useEffect()\n   */\n\n  const [courses, setCourses] = useState(courseStore.getCourses());\n  /**\n   *  - declare state to hold course form data\n   *  - initialise with an empty course object\n   * */\n\n  const [course, setCourse] = useState({\n    id: null,\n    slug: \"\",\n    title: \"\",\n    authorId: null,\n    category: \"\"\n  }); // declare change handler to enable form inputs\n\n  const handleTitleChange = useCallback(event => {\n    /**\n     *  - use ...spread operator to copy state for editing\n     *  - set value passed in by form event based on the\n     *    name property of element e.g.\n     *    if attribute name=\"title\",\n     *    then value will be stored in course.title\n     *    and intialised to a variable prop [event.target.name]\n     *    called a Computed Property\n     *    which can be used by each form input.\n     *  - pass updated course to setCourse function*/\n    const updatedCourse = { // copy the course object\n      ...course,\n      // set the title property on the copy to the value passed in on the event\n      title: event.target.value // [event.target.name]: event.target.value,\n\n    }; // pass the updatedCourse to the setCourse function\n\n    setCourse(updatedCourse);\n  }, [course]);\n  const handleAuthorChange = useCallback(event => {\n    const updatedCourse = { ...course,\n      authorId: event.target.value\n    };\n    setCourse(updatedCourse);\n  }, [course]);\n  const handleCategoryChange = useCallback(event => {\n    const updatedCourse = { ...course,\n      category: event.target.value\n    };\n    setCourse(updatedCourse);\n  }, [course]); // Edit course\n\n  useEffect(() => {\n    console.log(); // connect/subscribe to the flux store\n\n    courseStore.addChangeListener(onChange, handleCategoryChange, handleTitleChange, handleAuthorChange); // run onChange() callback when courseStore changes\n    // get slug from querry parameters\n\n    const slug = props.match.params.slug; // pulled from path '/courses/:slug' in App.js\n    // Find course by slug\n\n    /** if the user access this page directly we need to check\n     *  if courses have been loaded into the Flux store.\n     *  if courses have not been load we need to ask the Flux\n     *  store to load them before the use can access a course.\n     */\n    // on page load check if there's any courses in state yet\n\n    if (courses.length === 0) {\n      // if no courses in courses array we load them\n\n      /** when this change is completed the\n       *  callback onChange() is executed and\n       *  updated the array of courses.\n       *  since courses.length is listed in the\n       *  dependency array below, useEffect will run again.*/\n      courseActions.loadCourses();\n    } else if (slug) {\n      // get course from store and update the course\n\n      /** getCourseBySlug returns a course with a specified slug\n       *  from the flux store. The result is passed to setCourse().\n       */\n      if (courseStore.courseFound(slug) === true) {\n        setCourse(courseStore.getCourseBySlug(slug)); // from path '/courses/:slug'\n      } else {\n        props.history.push(\"/404\");\n      }\n    } // on UNMOUNTING (navigating to a different page) return this function\n\n    /** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */\n\n\n    return () => courseStore.removeChangeListener(onChange); // clean addChangeListener new page is rendered\n  }, [handleCategoryChange, handleTitleChange, handleAuthorChange, props.history, courses.length, props.match.params.slug]); // declare a dependancy array\n\n  /** If anything in the dependency array changes, useEffect will re-run.\n   *  When useEffect runs the second time after courses are loaded\n   *  courses.length will not be 0 and if there's a slug in the url\n   *  it will ask the store for the relevant course, and the course\n   *  will be there because the array of courses  has already been\n   *  populated in the Flux store.\n   */\n  // Rename authors array keys to html options tag attributes\n\n  function options(options) {\n    // map object array\n    return options = options.map(item => {\n      debugger; // copy object array and rename keys to value and label\n\n      return {\n        value: item.id,\n        label: item.name\n      };\n    });\n  } // execute function when a course is added to the store\n\n\n  function onChange() {\n    // request courses from store and add/set to this component state\n    setCourses(courseStore.getCourses());\n    /** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */\n  } // form validation function\n\n\n  function formIsValid() {\n    // declare local errors object\n    const _errors = {}; // initialise errors if course props empty\n\n    if (!course.title) _errors.title = \"Title is required\";\n    if (!course.authorId) _errors.authorId = \"Author ID is required\";\n    if (!course.category) _errors.category = \"Category is required\"; // pass validation error result\n\n    setErrors(_errors); // form is valid if the errors object has no properties\n\n    return Object.keys(_errors).length === 0; // returns boolean\n\n    /**\n     *  the Object.keys returns an array of an object's keys.\n     *  if the array of keys for the _errors' object is 0 then\n     *  the errors object has no properties.\n     */\n  } // declare submit handler\n  // automatically receives an event from browser\n\n\n  function handleSubmit(event) {\n    // handle form validation\n\n    /** if the form is not valid then do nothing. */\n    if (!formIsValid()) return; // to handle event on client, call prevent default post to server\n\n    event.preventDefault(); // call courseActions (instead of directly calling the api)\n\n    courseActions // pass the course held in state\n    .saveCourse(course)\n    /** all the api functions return a promise so we could\n     *  declare .then() to specify what should happen after\n     *  the saveCourse is completed.\n     */\n    .then(() => {\n      // redirect back to CoursesPage\n      props.history.push(\"/courses\");\n      /** since Add Course was loaded via\n       * React Router's Route we have access to\n       * React Router's history object on props.\n       * So we can programmatically redirect the\n       * user after the save is completed. */\n      // display notification after success save\n\n      toast.success(\"Course saved.\");\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }, \"Manage Course\"), /*#__PURE__*/React.createElement(CourseForm, {\n    course: course,\n    options: options,\n    onTitleChange: handleTitleChange,\n    onAuthorChange: handleAuthorChange,\n    onCategoryChange: handleCategoryChange,\n    onSubmit: handleSubmit,\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ManageCoursePage; // then create a route in App.js","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/ManageCoursePage.js"],"names":["React","useState","useEffect","useCallback","CourseForm","toast","courseStore","courseActions","ManageCoursePage","props","errors","setErrors","courses","setCourses","getCourses","course","setCourse","id","slug","title","authorId","category","handleTitleChange","event","updatedCourse","target","value","handleAuthorChange","handleCategoryChange","console","log","addChangeListener","onChange","match","params","length","loadCourses","courseFound","getCourseBySlug","history","push","removeChangeListener","options","map","item","label","name","formIsValid","_errors","Object","keys","handleSubmit","preventDefault","saveCourse","then","success"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport CourseForm from \"./CourseForm\";\n\n// import toast notifications\nimport { toast } from \"react-toastify\";\n\n// import store to access payloads from the api\nimport courseStore from \"../stores/courseStore\";\n\n// import actions to interact with the store and not the api directly\nimport * as courseActions from \"../actions/courseActions\";\n\n/** Arrow function component with props received */\nconst ManageCoursePage = (props) => {\n  /**\n   *  - declare client side validation state\n   *  - initialise with empty object */\n  const [errors, setErrors] = useState({});\n\n  // Connect page to Flux store\n  /** store the list of courses from the Flux store in state,\n   *  then connect to the store in on Mount - useEffect()\n   */\n  const [courses, setCourses] = useState(courseStore.getCourses());\n\n  /**\n   *  - declare state to hold course form data\n   *  - initialise with an empty course object\n   * */\n  const [course, setCourse] = useState({\n    id: null,\n    slug: \"\",\n    title: \"\",\n    authorId: null,\n    category: \"\",\n  });\n\n  // declare change handler to enable form inputs\n  const handleTitleChange = useCallback(\n    (event) => {\n      /**\n       *  - use ...spread operator to copy state for editing\n       *  - set value passed in by form event based on the\n       *    name property of element e.g.\n       *    if attribute name=\"title\",\n       *    then value will be stored in course.title\n       *    and intialised to a variable prop [event.target.name]\n       *    called a Computed Property\n       *    which can be used by each form input.\n       *  - pass updated course to setCourse function*/\n      const updatedCourse = {\n        // copy the course object\n        ...course,\n        // set the title property on the copy to the value passed in on the event\n        title: event.target.value,\n        // [event.target.name]: event.target.value,\n      };\n      // pass the updatedCourse to the setCourse function\n      setCourse(updatedCourse);\n    },\n    [course]\n  );\n\n  const handleAuthorChange = useCallback(\n    (event) => {\n      const updatedCourse = {\n        ...course,\n        authorId: event.target.value,\n      };\n      setCourse(updatedCourse);\n    },\n    [course]\n  );\n\n  const handleCategoryChange = useCallback(\n    (event) => {\n      const updatedCourse = {\n        ...course,\n        category: event.target.value,\n      };\n      setCourse(updatedCourse);\n    },\n    [course]\n  );\n\n  // Edit course\n  useEffect(() => {\n    console.log();\n\n    // connect/subscribe to the flux store\n    courseStore.addChangeListener(\n      onChange,\n      handleCategoryChange,\n      handleTitleChange,\n      handleAuthorChange\n    ); // run onChange() callback when courseStore changes\n\n    // get slug from querry parameters\n    const slug = props.match.params.slug; // pulled from path '/courses/:slug' in App.js\n\n    // Find course by slug\n    /** if the user access this page directly we need to check\n     *  if courses have been loaded into the Flux store.\n     *  if courses have not been load we need to ask the Flux\n     *  store to load them before the use can access a course.\n     */\n\n    // on page load check if there's any courses in state yet\n    if (courses.length === 0) {\n      // if no courses in courses array we load them\n      /** when this change is completed the\n       *  callback onChange() is executed and\n       *  updated the array of courses.\n       *  since courses.length is listed in the\n       *  dependency array below, useEffect will run again.*/\n      courseActions.loadCourses();\n    } else if (slug) {\n      // get course from store and update the course\n      /** getCourseBySlug returns a course with a specified slug\n       *  from the flux store. The result is passed to setCourse().\n       */\n\n      if (courseStore.courseFound(slug) === true) {\n        setCourse(courseStore.getCourseBySlug(slug)); // from path '/courses/:slug'\n      } else {\n        props.history.push(\"/404\");\n      }\n    }\n\n    // on UNMOUNTING (navigating to a different page) return this function\n    /** useEffect lets declare the code to run when a component UNMOUNTS\n     *  by returning a funciton.\n     */\n    return () => courseStore.removeChangeListener(onChange); // clean addChangeListener new page is rendered\n  }, [\n    handleCategoryChange,\n    handleTitleChange,\n    handleAuthorChange,\n    props.history,\n    courses.length,\n    props.match.params.slug,\n  ]); // declare a dependancy array\n  /** If anything in the dependency array changes, useEffect will re-run.\n   *  When useEffect runs the second time after courses are loaded\n   *  courses.length will not be 0 and if there's a slug in the url\n   *  it will ask the store for the relevant course, and the course\n   *  will be there because the array of courses  has already been\n   *  populated in the Flux store.\n   */\n\n  // Rename authors array keys to html options tag attributes\n  function options(options) {\n    // map object array\n    return (options = options.map((item) => {\n      debugger;\n      // copy object array and rename keys to value and label\n      return { value: item.id, label: item.name };\n    }));\n  }\n\n  // execute function when a course is added to the store\n  function onChange() {\n    // request courses from store and add/set to this component state\n    setCourses(courseStore.getCourses());\n    /** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */\n  }\n\n  // form validation function\n  function formIsValid() {\n    // declare local errors object\n    const _errors = {};\n\n    // initialise errors if course props empty\n    if (!course.title) _errors.title = \"Title is required\";\n    if (!course.authorId) _errors.authorId = \"Author ID is required\";\n    if (!course.category) _errors.category = \"Category is required\";\n\n    // pass validation error result\n    setErrors(_errors);\n\n    // form is valid if the errors object has no properties\n    return Object.keys(_errors).length === 0; // returns boolean\n    /**\n     *  the Object.keys returns an array of an object's keys.\n     *  if the array of keys for the _errors' object is 0 then\n     *  the errors object has no properties.\n     */\n  }\n\n  // declare submit handler\n  // automatically receives an event from browser\n  function handleSubmit(event) {\n    // handle form validation\n    /** if the form is not valid then do nothing. */\n    if (!formIsValid()) return;\n\n    // to handle event on client, call prevent default post to server\n    event.preventDefault();\n\n    // call courseActions (instead of directly calling the api)\n    courseActions\n      // pass the course held in state\n      .saveCourse(course)\n      /** all the api functions return a promise so we could\n       *  declare .then() to specify what should happen after\n       *  the saveCourse is completed.\n       */\n      .then(() => {\n        // redirect back to CoursesPage\n        props.history.push(\"/courses\");\n        /** since Add Course was loaded via\n         * React Router's Route we have access to\n         * React Router's history object on props.\n         * So we can programmatically redirect the\n         * user after the save is completed. */\n\n        // display notification after success save\n        toast.success(\"Course saved.\");\n      });\n  }\n\n  return (\n    <>\n      <h2>Manage Course</h2>\n      {/** Pass down to CourseForm child component via props\n       *  - pass down course state object\n       *  - pass down change handler\n       *  - pass down save form handler\n       *  - pass down validation errors */}\n      <CourseForm\n        course={course}\n        options={options}\n        onTitleChange={handleTitleChange}\n        onAuthorChange={handleAuthorChange}\n        onCategoryChange={handleCategoryChange}\n        onSubmit={handleSubmit}\n        errors={errors}\n      />\n    </>\n  );\n};\n\nexport default ManageCoursePage;\n\n// then create a route in App.js\n"]},"metadata":{},"sourceType":"module"}