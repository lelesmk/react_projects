{"ast":null,"code":"import _slicedToArray from\"/Users/LelethuMkefa/dev/js-course/course-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{getAuthors}from\"../api/authorApi\";function SelectDropDown(props){// 1. Set initial value of state and return current value\nvar _useState=useState([{value:\"\",label:\"Loading...\"}]),_useState2=_slicedToArray(_useState,2),options=_useState2[0],setOptions=_useState2[1];// 4. Stop use from interacting with dropdown while loading\nvar _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];// 6. Control dropdown value selected in state and set initial value\n//   const [value, setValue] = useState(\"Select author\");\nvar wrapperClass=\"form-group\";// Dynamically add a Bootstrap class name\nif(props.error.length>0){wrapperClass+=\" has-error\";/** Bootstrapper has-error class will add a\n     *  red line around the input when it is in\n     *  an error state.\n     */}useEffect(function()/** first parameter is a function to execute when\n       *  the side effect runs */{// 5. Set unmounted flag to set state only if use is still on the page\nvar unmounted=false;// 3. Fetch data from a API if use is still mounted\nif(!unmounted){getAuthors().then(function(_options){return setOptions(_options.map(function(_ref){var id=_ref.id,name=_ref.name;return{value:id,label:name};}));});// 4. Enable dropdown after loading\nsetLoading(false);}// on unmount -> 5\nreturn function(){unmounted=true;};},/** second parameter determines when the side effect runs.\n     *  In our case this is just after the component first\n     *  renders because we have specified an empty array */[]);// 2. Map current value of state to select dropdown options\nreturn/*#__PURE__*/ /** diabable while loading -> 4\n     *  bind value in state to value prop on select element -> 6\n     *  update this state in a change event listener with onChange prop ->6\n     */React.createElement(\"div\",{className:wrapperClass},/*#__PURE__*/React.createElement(\"label\",{htmlFor:props.id},props.label),/*#__PURE__*/React.createElement(\"div\",{className:\"field\"},/*#__PURE__*/React.createElement(\"select\",{id:props.id,name:props.name,className:\"form-control\",disabled:loading,onChange:props.onChange,value:props.value},options.map(function(item){return/*#__PURE__*/ /** render the relevant option element */React.createElement(\"option\",{key:item.value,value:item.value},item.label);}))),props.error&&/*#__PURE__*/React.createElement(\"div\",{className:\"alert alert-danger\"},props.error));}// declare default PropTypes\nSelectDropDown.defaultProps={// if no error passed in, default to empty string\nerror:\"\"};export default SelectDropDown;","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/course-app/src/common/SelectDropDown.js"],"names":["React","useState","useEffect","getAuthors","SelectDropDown","props","value","label","options","setOptions","loading","setLoading","wrapperClass","error","length","unmounted","then","_options","map","id","name","onChange","item","defaultProps"],"mappings":"+HAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,UAAT,KAA2B,kBAA3B,CAEA,QAASC,CAAAA,cAAT,CAAwBC,KAAxB,CAA+B,CAC7B;AAD6B,cAECJ,QAAQ,CAAC,CAAC,CAAEK,KAAK,CAAE,EAAT,CAAaC,KAAK,CAAE,YAApB,CAAD,CAAD,CAFT,wCAEtBC,OAFsB,eAEbC,UAFa,eAI7B;AAJ6B,eAKCR,QAAQ,CAAC,IAAD,CALT,yCAKtBS,OALsB,eAKbC,UALa,eAO7B;AACA;AAEA,GAAIC,CAAAA,YAAY,CAAG,YAAnB,CACA;AACA,GAAIP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAqB,CAAzB,CAA4B,CAC1BF,YAAY,EAAI,YAAhB,CACA;;;OAID,CAEDV,SAAS,CACP,UACE;iCAEA,CACE;AACA,GAAIa,CAAAA,SAAS,CAAG,KAAhB,CAEA;AACA,GAAI,CAACA,SAAL,CAAgB,CACdZ,UAAU,GAAGa,IAAb,CAAkB,SAACC,QAAD,QAChBR,CAAAA,UAAU,CACRQ,QAAQ,CAACC,GAAT,CAAa,kBAAGC,CAAAA,EAAH,MAAGA,EAAH,CAAOC,IAAP,MAAOA,IAAP,OAAmB,CAAEd,KAAK,CAAEa,EAAT,CAAaZ,KAAK,CAAEa,IAApB,CAAnB,EAAb,CADQ,CADM,EAAlB,EAMA;AACAT,UAAU,CAAC,KAAD,CAAV,CACD,CAED;AACA,MAAO,WAAM,CACXI,SAAS,CAAG,IAAZ,CACD,CAFD,CAGD,CAxBI,CAyBP;;2DAGA,EA5BO,CAAT,CA+BA;AACA,oBACE;;;OAIA,2BAAK,SAAS,CAAEH,YAAhB,eACE,6BAAO,OAAO,CAAEP,KAAK,CAACc,EAAtB,EAA2Bd,KAAK,CAACE,KAAjC,CADF,cAEE,2BAAK,SAAS,CAAC,OAAf,eACE,8BACE,EAAE,CAAEF,KAAK,CAACc,EADZ,CAEE,IAAI,CAAEd,KAAK,CAACe,IAFd,CAGE,SAAS,CAAC,cAHZ,CAIE,QAAQ,CAAEV,OAJZ,CAKE,QAAQ,CAAEL,KAAK,CAACgB,QALlB,CAME,KAAK,CAAEhB,KAAK,CAACC,KANf,EASGE,OAAO,CAACU,GAAR,CAAY,SAACI,IAAD,sBACX,yCAEA,8BAAQ,GAAG,CAAEA,IAAI,CAAChB,KAAlB,CAAyB,KAAK,CAAEgB,IAAI,CAAChB,KAArC,EACGgB,IAAI,CAACf,KADR,CAHW,EAAZ,CATH,CADF,CAFF,CAsBGF,KAAK,CAACQ,KAAN,eAAe,2BAAK,SAAS,CAAC,oBAAf,EAAqCR,KAAK,CAACQ,KAA3C,CAtBlB,CALF,CA8BD,CAED;AACAT,cAAc,CAACmB,YAAf,CAA8B,CAC5B;AACAV,KAAK,CAAE,EAFqB,CAA9B,CAKA,cAAeT,CAAAA,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getAuthors } from \"../api/authorApi\";\n\nfunction SelectDropDown(props) {\n  // 1. Set initial value of state and return current value\n  const [options, setOptions] = useState([{ value: \"\", label: \"Loading...\" }]);\n\n  // 4. Stop use from interacting with dropdown while loading\n  const [loading, setLoading] = useState(true);\n\n  // 6. Control dropdown value selected in state and set initial value\n  //   const [value, setValue] = useState(\"Select author\");\n\n  let wrapperClass = \"form-group\";\n  // Dynamically add a Bootstrap class name\n  if (props.error.length > 0) {\n    wrapperClass += \" has-error\";\n    /** Bootstrapper has-error class will add a\n     *  red line around the input when it is in\n     *  an error state.\n     */\n  }\n\n  useEffect(\n    () =>\n      /** first parameter is a function to execute when\n       *  the side effect runs */\n      {\n        // 5. Set unmounted flag to set state only if use is still on the page\n        let unmounted = false;\n\n        // 3. Fetch data from a API if use is still mounted\n        if (!unmounted) {\n          getAuthors().then((_options) =>\n            setOptions(\n              _options.map(({ id, name }) => ({ value: id, label: name }))\n            )\n          );\n\n          // 4. Enable dropdown after loading\n          setLoading(false);\n        }\n\n        // on unmount -> 5\n        return () => {\n          unmounted = true;\n        };\n      },\n    /** second parameter determines when the side effect runs.\n     *  In our case this is just after the component first\n     *  renders because we have specified an empty array */\n    []\n  );\n\n  // 2. Map current value of state to select dropdown options\n  return (\n    /** diabable while loading -> 4\n     *  bind value in state to value prop on select element -> 6\n     *  update this state in a change event listener with onChange prop ->6\n     */\n    <div className={wrapperClass}>\n      <label htmlFor={props.id}>{props.label}</label>\n      <div className=\"field\">\n        <select\n          id={props.id}\n          name={props.name}\n          className=\"form-control\"\n          disabled={loading}\n          onChange={props.onChange}\n          value={props.value}\n        >\n          {/** iterate current value and label props in state*/}\n          {options.map((item) => (\n            /** render the relevant option element */\n\n            <option key={item.value} value={item.value}>\n              {item.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      {/** Display validation error below input */}\n      {props.error && <div className=\"alert alert-danger\">{props.error}</div>}\n    </div>\n  );\n}\n\n// declare default PropTypes\nSelectDropDown.defaultProps = {\n  // if no error passed in, default to empty string\n  error: \"\",\n};\n\nexport default SelectDropDown;\n"]},"metadata":{},"sourceType":"module"}