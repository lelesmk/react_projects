{"ast":null,"code":"import dispatcher from\"../appDispatcher\";// import courseApi to implement action calls to api\nimport*as courseApi from\"../api/courseApi\";import actionTypes from\"./actionTypes\";// ! the below function is called an Action Creator ! //\nexport function saveCourse(course){// call courseApi to save a course passed in by this function\n/** return the promise from the call to api so\n   *  the caller of this function will be notified\n   *  when the promise resolves/completes */return courseApi.saveCourse(course).then(function(savedCourse){// returns savedCourse\n// handle saved course response\n/** use flux dispatcher to notify all the stores\n     *  that a course was just created. Stores will\n     *  take the data payload dispatched here and\n     *  put it to use.\n     */dispatcher.dispatch(// an action is an object with actionType property\n{// ! the below properties declared make up the Action ! //\n// required property\n// actionType: \"CREATE_COURSE\",\n/**\n         *  actionType is hardcoded as a magic string.\n         *  this requires carefully typing it the\n         *  exact same way when declaring the store\n         *  which will handle the action.\n         *\n         *  instead its best practice to create a\n         *  constant file that contains a list of\n         *  all the actionTypes used in the system\n         *  (actionType is a constant so assigned\n         *  with uppercase.)\n         *\n         */ // call actionTypes object instead of hardcoding\n/** call action based on whether a we're working on\n         *  an existing course or new course.\n         */actionType:course.id// if course has an id\n?actionTypes.UPDATE_COURSE// then UPDATE\n:actionTypes.CREATE_COURSE,// else CREATE\n// optional properties to pass with action object\ncourse:savedCourse});});}// declare flux call to api\nexport function loadCourses(){return courseApi.getCourses().then(function(courses){// returns courses array\n// dispatch courses array payload with action\ndispatcher.dispatch({actionType:actionTypes.LOAD_COURSES,courses:courses});});// Next, update the courseStore to handle this actionType\n}// delete course by id\nexport function deleteCourse(id){return courseApi.deleteCourse(id).then(function(){// empty return ()\n// dispatch courses array payload with action\ndispatcher.dispatch({actionType:actionTypes.DELETE_COURSE,id:id});});}","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/course-app/src/actions/courseActions.js"],"names":["dispatcher","courseApi","actionTypes","saveCourse","course","then","savedCourse","dispatch","actionType","id","UPDATE_COURSE","CREATE_COURSE","loadCourses","getCourses","courses","LOAD_COURSES","deleteCourse","DELETE_COURSE"],"mappings":"AAAA,MAAOA,CAAAA,UAAP,KAAuB,kBAAvB,CAEA;AACA,MAAO,GAAKC,CAAAA,SAAZ,KAA2B,kBAA3B,CAEA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CAEA;AACA,MAAO,SAASC,CAAAA,UAAT,CAAoBC,MAApB,CAA4B,CACjC;AACA;;4CAGA,MAAOH,CAAAA,SAAS,CAACE,UAAV,CAAqBC,MAArB,EAA6BC,IAA7B,CAAkC,SAACC,WAAD,CAAiB,CACxD;AACA;AACA;;;;OAKAN,UAAU,CAACO,QAAX,CACE;AACA,CACE;AAEA;AAEA;AACA;;;;;;;;;;;;WANF,CAoBE;AAEA;;WAGAC,UAAU,CAAEJ,MAAM,CAACK,EAAG;AAAV,CACRP,WAAW,CAACQ,aAAc;AADlB,CAERR,WAAW,CAACS,aA3BlB,CA2BiC;AAE/B;AACAP,MAAM,CAAEE,WA9BV,CAFF,EAmCD,CA3CM,CAAP,CA4CD,CAED;AACA,MAAO,SAASM,CAAAA,WAAT,EAAuB,CAC5B,MAAOX,CAAAA,SAAS,CAACY,UAAV,GAAuBR,IAAvB,CAA4B,SAACS,OAAD,CAAa,CAC9C;AACA;AACAd,UAAU,CAACO,QAAX,CAAoB,CAClBC,UAAU,CAAEN,WAAW,CAACa,YADN,CAElBD,OAAO,CAAEA,OAFS,CAApB,EAID,CAPM,CAAP,CASA;AACD,CAED;AACA,MAAO,SAASE,CAAAA,YAAT,CAAsBP,EAAtB,CAA0B,CAC/B,MAAOR,CAAAA,SAAS,CAACe,YAAV,CAAuBP,EAAvB,EAA2BJ,IAA3B,CAAgC,UAAM,CAC3C;AACA;AACAL,UAAU,CAACO,QAAX,CAAoB,CAClBC,UAAU,CAAEN,WAAW,CAACe,aADN,CAElBR,EAAE,CAAEA,EAFc,CAApB,EAID,CAPM,CAAP,CAQD","sourcesContent":["import dispatcher from \"../appDispatcher\";\n\n// import courseApi to implement action calls to api\nimport * as courseApi from \"../api/courseApi\";\n\nimport actionTypes from \"./actionTypes\";\n\n// ! the below function is called an Action Creator ! //\nexport function saveCourse(course) {\n  // call courseApi to save a course passed in by this function\n  /** return the promise from the call to api so\n   *  the caller of this function will be notified\n   *  when the promise resolves/completes */\n  return courseApi.saveCourse(course).then((savedCourse) => {\n    // returns savedCourse\n    // handle saved course response\n    /** use flux dispatcher to notify all the stores\n     *  that a course was just created. Stores will\n     *  take the data payload dispatched here and\n     *  put it to use.\n     */\n    dispatcher.dispatch(\n      // an action is an object with actionType property\n      {\n        // ! the below properties declared make up the Action ! //\n\n        // required property\n\n        // actionType: \"CREATE_COURSE\",\n        /**\n         *  actionType is hardcoded as a magic string.\n         *  this requires carefully typing it the\n         *  exact same way when declaring the store\n         *  which will handle the action.\n         *\n         *  instead its best practice to create a\n         *  constant file that contains a list of\n         *  all the actionTypes used in the system\n         *  (actionType is a constant so assigned\n         *  with uppercase.)\n         *\n         */\n\n        // call actionTypes object instead of hardcoding\n\n        /** call action based on whether a we're working on\n         *  an existing course or new course.\n         */\n        actionType: course.id // if course has an id\n          ? actionTypes.UPDATE_COURSE // then UPDATE\n          : actionTypes.CREATE_COURSE, // else CREATE\n\n        // optional properties to pass with action object\n        course: savedCourse,\n      }\n    );\n  });\n}\n\n// declare flux call to api\nexport function loadCourses() {\n  return courseApi.getCourses().then((courses) => {\n    // returns courses array\n    // dispatch courses array payload with action\n    dispatcher.dispatch({\n      actionType: actionTypes.LOAD_COURSES,\n      courses: courses,\n    });\n  });\n\n  // Next, update the courseStore to handle this actionType\n}\n\n// delete course by id\nexport function deleteCourse(id) {\n  return courseApi.deleteCourse(id).then(() => {\n    // empty return ()\n    // dispatch courses array payload with action\n    dispatcher.dispatch({\n      actionType: actionTypes.DELETE_COURSE,\n      id: id,\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}