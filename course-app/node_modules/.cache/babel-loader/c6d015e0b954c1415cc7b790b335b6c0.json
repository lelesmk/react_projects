{"ast":null,"code":"var _jsxFileName = \"/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/CoursesPage.js\";\nimport React from \"react\"; // import function to call from mock api\n\nimport { getCourses } from \"../api/courseApi\";\n\nclass CoursesPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      courses: []\n    };\n  }\n\n  // call lifecycle method for making API calls\n  componentDidMount() {\n    // the component must be mounted before calling setSate()\n    // /**\n    //  *  - returns a promise based api - a future value\n    //  *  - .then() handles the future response value */\n    // getCourses().then(\n    //   //   /**\n    //   //    *  - function call will be resolved when the\n    //   //    *    api call is completed.\n    //   //    *  - the anonymous function(courses) receives an\n    //   //    *    array of courses returned by getCourses() api call */\n    //   function (courses) {\n    //     //     /**\n    //     //      *  - now we have a reference to the list of courses\n    //     //      *    and ready to set state.\n    //     //      *  - setSate accepts an object that describes the new\n    //     //      *    new properties that we'd like to set in state.\n    //     //      *  - set courses object with the courses list properties\n    //     //      *    we've just received.*/\n    //     this.setState({ courses: courses });\n    //   }\n    // );\n    // more concise Arrow Function syntax\n    getCourses().then(courses => this.setState({\n      courses: courses\n    }));\n    /** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */\n  } // display state in table\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, \"Courses\"), /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }, \"Title\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    }, \"Author ID\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, \"Category\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, this.state.courses.map(course => {\n      return (\n        /*#__PURE__*/\n\n        /** - for each course return a table row array.\n         *  - assign a unique key to child in list so\n         *  React can track each element when we create\n         *  multiple instances of an element using\n         *  React components. Now when we add or remove\n         *  different elements (row is an element) React\n         *  can maintain proper state so the order of\n         *  these element doesn't get destroyed when we\n         *  re-render the application.\n         */\n        React.createElement(\"tr\", {\n          key: course.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 19\n          }\n        }, course.title), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 19\n          }\n        }, course.authorId), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 19\n          }\n        }, course.category))\n      );\n    }))));\n  }\n\n}\n\nexport default CoursesPage;","map":{"version":3,"sources":["/Users/LelethuMkefa/dev/js-course/react-flux-app/src/components/CoursesPage.js"],"names":["React","getCourses","CoursesPage","Component","state","courses","componentDidMount","then","setState","render","map","course","id","title","authorId","category"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAA0C;AAAA;AAAA;AAAA,SAaxCC,KAbwC,GAahC;AACNC,MAAAA,OAAO,EAAE;AADH,KAbgC;AAAA;;AAiBxC;AACAC,EAAAA,iBAAiB,GAAG;AAClB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,IAAAA,UAAU,GAAGM,IAAb,CAAmBF,OAAD,IAAa,KAAKG,QAAL,CAAc;AAAEH,MAAAA,OAAO,EAAEA;AAAX,KAAd,CAA/B;AACA;;;;AAID,GA/CuC,CAiDxC;;;AACAI,EAAAA,MAAM,GAAG;AACP,wBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAO,MAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,CADF,CADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIG,KAAKL,KAAL,CAAWC,OAAX,CAAmBK,GAAnB,CAAwBC,MAAD,IAAY;AAClC;AAAA;;AACE;;;;;;;;;;AAUA;AAAI,UAAA,GAAG,EAAEA,MAAM,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKD,MAAM,CAACE,KAAZ,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKF,MAAM,CAACG,QAAZ,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKH,MAAM,CAACI,QAAZ,CAHF;AAXF;AAiBD,KAlBA,CAJH,CARF,CAFF,CADF;AAsCD;;AAzFuC;;AA4F1C,eAAeb,WAAf","sourcesContent":["import React from \"react\";\n\n// import function to call from mock api\nimport { getCourses } from \"../api/courseApi\";\n\nclass CoursesPage extends React.Component {\n  // store list of courses in state\n  // store state by constructor\n  //   constructor(props) {\n  //     super(props);\n\n  //     // declare state as an object\n  //     this.state = {\n  //       courses: [],\n  //     };\n  //   }\n\n  // OR simply declare state without constructor\n  state = {\n    courses: [],\n  };\n\n  // call lifecycle method for making API calls\n  componentDidMount() {\n    // the component must be mounted before calling setSate()\n\n    // /**\n    //  *  - returns a promise based api - a future value\n    //  *  - .then() handles the future response value */\n    // getCourses().then(\n    //   //   /**\n    //   //    *  - function call will be resolved when the\n    //   //    *    api call is completed.\n    //   //    *  - the anonymous function(courses) receives an\n    //   //    *    array of courses returned by getCourses() api call */\n    //   function (courses) {\n    //     //     /**\n    //     //      *  - now we have a reference to the list of courses\n    //     //      *    and ready to set state.\n    //     //      *  - setSate accepts an object that describes the new\n    //     //      *    new properties that we'd like to set in state.\n    //     //      *  - set courses object with the courses list properties\n    //     //      *    we've just received.*/\n    //     this.setState({ courses: courses });\n    //   }\n    // );\n    // more concise Arrow Function syntax\n    getCourses().then((courses) => this.setState({ courses: courses }));\n    /** what this says is:\n     *  - getCourses from the api\n     *  - when the api call completes, then\n     *  - store the array of courses in state */\n  }\n\n  // display state in table\n  render() {\n    return (\n      <>\n        <h2>Courses</h2>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>Title</th>\n              <th>Author ID</th>\n              <th>Category</th>\n            </tr>\n          </thead>\n          <tbody>\n            {/** - iterate this state.courses and\n             *   - call map on that array of courses.\n             *   - map returns an array. */}\n            {this.state.courses.map((course) => {\n              return (\n                /** - for each course return a table row array.\n                 *  - assign a unique key to child in list so\n                 *  React can track each element when we create\n                 *  multiple instances of an element using\n                 *  React components. Now when we add or remove\n                 *  different elements (row is an element) React\n                 *  can maintain proper state so the order of\n                 *  these element doesn't get destroyed when we\n                 *  re-render the application.\n                 */\n                <tr key={course.id}>\n                  <td>{course.title}</td>\n                  <td>{course.authorId}</td>\n                  <td>{course.category}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n}\n\nexport default CoursesPage;\n"]},"metadata":{},"sourceType":"module"}